{
  "openapi": "3.0.0",
  "info": {
    "title": "SwiftPro REST API Docs",
    "version": "2.3.0",
    "description": "SwiftPro REST API docs for dev server - This docs is mainly for itegration and testing"
  },
  "servers": [
    {
      "url": "http://localhost:10000/api/v1",
      "desription": "Local server testing"
    },
    {
      "url": "https://dev.swiftpro.tech/api/v1/dev",
      "description": "Development server for testing and integration"
    },
    {
      "url": "http://16.52.78.142/api/v1/dev",
      "description": "Development server for testing and integration"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "AuthenticatedError": {
        "type": "object",
        "properties": {
          "status": {
            "type": "number",
            "example": 401
          },
          "message": {
            "type": "string",
            "example": "User not authenticated"
          }
        }
      },
      "NotFoundError": {
        "type": "object",
        "properties": {
          "status": {
            "type": "number",
            "example": 404
          },
          "message": {
            "type": "string",
            "example": "Not Found"
          }
        }
      },
      "DuplicateError": {
        "type": "object",
        "properties": {
          "status": {
            "type": "number",
            "example": 409
          },
          "message": {
            "type": "string",
            "example": "Duplicate entry"
          }
        }
      },
      "ValidationError": {
        "type": "object",
        "properties": {
          "status": {
            "type": "number",
            "example": 422
          },
          "message": {
            "type": "string",
            "example": "Validation failed"
          }
        }
      },
      "ServerError": {
        "type": "object",
        "properties": {
          "status": {
            "type": "number",
            "example": 500
          },
          "message": {
            "type": "string",
            "example": "Internal server error"
          }
        }
      },
      "AuthorizeError": {
        "type": "object",
        "properties": {
          "status": {
            "type": "number",
            "example": 403
          },
          "message": {
            "type": "string",
            "example": "Unauthorized"
          }
        }
      },
      "BadRequest": {
        "type": "object",
        "properties": {
          "status": {
            "type": "number",
            "example": 400
          },
          "message": {
            "type": "string",
            "example": "Bad request"
          }
        }
      },
      "CompanyList": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "admins": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "active",
                    "inactive",
                    "pending",
                    "suspended"
                  ]
                }
              },
              "required": [
                "email",
                "name",
                "status"
              ]
            }
          },
          "planName": {
            "type": "string"
          },
          "maxUsers": {
            "type": "number"
          },
          "usedUsers": {
            "type": "number"
          },
          "duration": {
            "type": "number"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "subscriptionStatus": {
            "type": "string",
            "enum": [
              "active",
              "expired",
              "canceled",
              "pending"
            ]
          },
          "subscriptionExpiry": {
            "type": "string",
            "format": "date-time"
          },
          "industry": {
            "type": "string",
            "nullable": true
          },
          "sizeCategory": {
            "type": "string",
            "enum": [
              "small",
              "medium",
              "large"
            ],
            "nullable": true
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "inactive"
            ],
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "required": [
          "name",
          "domain",
          "planName",
          "maxUsers",
          "duration",
          "createdAt"
        ]
      },
      "CompanyDetails": {
        "type": "object",
        "properties": {
          "_id": {

          },
          "name": {
            "type": "string"
          },
          "domain": {

          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "inactive",
              "suspended"
            ]
          },
          "subscription": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string"
              },
              "companyId": {
                "type": "string"
              },
              "plan": {
                "type": "object",
                "properties": {
                  "_id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "price": {
                    "type": "number"
                  }
                }
              },
              "status": {
                "type": "string",
                "enum": [
                  "active",
                  "expired",
                  "canceled",
                  "pending"
                ]
              },
              "startDate": {
                "type": "string"
              },
              "expiryDate": {
                "type": "string"
              }
            }
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "companyId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "role": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "active",
              "inactive"
            ]
          },
          "lastLoginAt": {
            "type": "string",
            "format": "date-time"
          },
          "phone": {
            "type": "string"
          },
          "website": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "lastActivity": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "email",
          "status"
        ]
      },
      "Document": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "fileType": {
            "type": "string"
          },
          "link": {
            "type": "string"
          },
          "fileSize": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        }
      },
      "VendorDetails": {
        "type": "object",
        "properties": {
          "vendorId": {
            "type": "string"
          },
          "lastActive": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "businessType": {
            "type": "string"
          },
          "website": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "isSuspended": {
            "type": "boolean"
          },
          "location": {
            "type": "string"
          },
          "secondaryEmail": {
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        }
      },
      "Vendor": {
        "type": "object",
        "properties": {
          "vendorId": {
            "type": "string"
          },
          "lastActive": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "businessType": {
            "type": "string"
          },
          "website": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "isSuspended": {
            "type": "boolean"
          },
          "location": {
            "type": "string"
          },
          "secondaryEmail": {
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "document": {
            "$ref": "#/components/schemas/Document"
          }
        }
      },
      "EvaluationDetails": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "solicitation": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "type": {
                "type": "string"
              }
            }
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "evaluators": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "groupId": {
                  "type": "string"
                },
                "groupName": {
                  "type": "string"
                },
                "evaluators": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "email": {
                        "type": "string"
                      },
                      "_id": {
                        "type": "string"
                      },
                      "criteriaCount": {
                        "type": "integer"
                      },
                      "status": {
                        "type": "string",
                        "nullable": true
                      }
                    }
                  }
                }
              }
            }
          },
          "evaluatorCount": {
            "type": "integer"
          },
          "groups": {
            "type": "integer"
          },
          "criteriaCount": {
            "type": "integer"
          },
          "documents": {
            "type": "integer"
          },
          "totalEvaluatorsInGroups": {
            "type": "integer"
          },
          "vendorCount": {
            "type": "integer"
          },
          "requiredDocuments": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string"
                },
                "groupName": {
                  "type": "string"
                },
                "vendor": {
                  "type": "integer"
                },
                "vendorCount": {
                  "type": "integer"
                }
              }
            }
          },
          "criterias": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string"
                },
                "title": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "evaluationGroup": {
                  "type": "string"
                },
                "criteria": {
                  "type": "object",
                  "properties": {
                    "pass_fail": {
                      "type": "string"
                    },
                    "weight": {
                      "type": "integer"
                    },
                    "status": {
                      "type": "string"
                    }
                  }
                },
                "__v": {
                  "type": "integer"
                },
                "createdAt": {
                  "type": "string",
                  "format": "date-time"
                },
                "updatedAt": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          "evaluationGroups": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "groupId": {
                  "type": "string"
                },
                "groupName": {
                  "type": "string"
                },
                "evaluators": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "_id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      }
                    }
                  }
                },
                "criteriaDetails": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "title": {
                        "type": "string"
                      },
                      "criteria": {
                        "type": "object",
                        "properties": {
                          "pass_fail": {
                            "type": "string"
                          },
                          "weight": {
                            "type": "integer"
                          },
                          "status": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "documentTitles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "averageProgress": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "Evaluation": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "solicitationName": {
            "type": "string"
          },
          "solicitationType": {
            "type": "string"
          }
        }
      },
      "EvaluationGroup": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string"
            },
            "groupName": {
              "type": "string"
            },
            "evaluatorNames": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "documentTitles": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "criteriaTitles": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "Category": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "Solicitation": {
        "type": "object",
        "required": [
          "name",
          "typeId",
          "categoryIds",
          "submissionDeadline"
        ],
        "properties": {
          "solId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "typeId": {
            "type": "string"
          },
          "categoryIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "enum": [
              "draft",
              "active",
              "closed",
              "awarded",
              "evaluating"
            ]
          },
          "questionDeadline": {
            "type": "string",
            "format": "date-time"
          },
          "submissionDeadline": {
            "type": "string",
            "format": "date-time"
          },
          "bidIntentDeadline": {
            "type": "string",
            "format": "date-time"
          },
          "vendors": {
            "type": "object",
            "properties": {
              "total": {
                "type": "number"
              },
              "status": {
                "type": "object"
              }
            }
          }
        }
      },
      "SolicitationDetail": {
        "type": "object",
        "properties": {
          "solId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "createdBy": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "email": {
                "type": "string"
              }
            }
          },
          "categoryIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "typeId": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              }
            }
          }
        }
      },
      "Evaluator": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "groups": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "groupName": {
                  "type": "string"
                },
                "criteriaCount": {
                  "type": "number"
                },
                "evaluators": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "email": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "totalEvaluators": {
            "type": "integer"
          },
          "totalEvaluatorsInEvaluation": {
            "type": "integer"
          },
          "averageProgress": {
            "type": "number"
          }
        }
      },
      "MyAction": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "action": {
              "type": "string"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            },
            "evaluation": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string"
                },
                "_id": {
                  "type": "string"
                }
              }
            },
            "solicitation": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string"
                },
                "typeId": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "EvaluationActivity": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "timezone": {
              "type": "string"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            },
            "action": {
              "type": "string"
            },
            "evaluation": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              }
            },
            "solicitation": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "AssignedEvaluation": {
        "type": "object",
        "properties": {
          "solicitationTitle": {
            "type": "string"
          },
          "solicitationName": {
            "type": "string"
          },
          "solicitationId": {
            "type": "string"
          },
          "solicitationType": {
            "type": "string"
          },
          "averageProgress": {
            "type": "number"
          },
          "evaluationGroups": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "progress": {
                  "type": "number"
                },
                "_id": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                },
                "assignedOn": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "EvaluatorEvaluationGroup": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "userName": {
            "type": "string"
          },
          "uploadCount": {
            "type": "integer"
          },
          "evaluationStatus": {
            "type": "integer"
          },
          "scoreId": {
            "type": "string"
          },
          "vendorId": {
            "type": "string"
          }
        }
      },
      "EvaluatorEvaluationDetail": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "solicitation": {
            "type": "object",
            "properties": {
              "title": {
                "type": "string"
              },
              "solId": {
                "type": "string"
              },
              "typeId": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "VendorDocument": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "link": {
            "type": "string"
          },
          "size": {
            "type": "string"
          }
        }
      },
      "EvaluatorCriteria": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "uploads": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "link": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          },
          "criteria": {
            "type": "object",
            "properties": {
              "status": {
                "type": "string"
              },
              "pass_fail": {
                "type": "string"
              },
              "weight": {
                "type": "number"
              }
            }
          }
        }
      },
      "SolicitationType": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "RequiredDocument": {
        "type": "object",
        "properties": {
          "solicitation": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "status": {
                "type": "string"
              },
              "solId": {
                "type": "string"
              },
              "typeId": {
                "type": "object"
              }
            }
          },
          "documents": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "name"
                },
                "link": {
                  "type": "string"
                },
                "size": {
                  "type": "string"
                },
                "required": {
                  "type": "boolean"
                },
                "type": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "Proposal": {
        "type": "object",
        "properties": {
          "requiredDoc": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "format": "objectid",
                  "ref": "EvaluationUpload"
                },
                "files": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "url": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      },
                      "size": {
                        "type": "string"
                      },
                      "uploadedAt": {
                        "type": "string",
                        "format": "date-time",
                        "default": "now"
                      }
                    }
                  }
                }
              }
            }
          },
          "action": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "component": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "unitPrice": {
                  "type": "number"
                }
              }
            }
          },
          "total": {
            "type": "number"
          },
          "status": {
            "type": "string",
            "enum": [
              "draft",
              "submit"
            ],
            "default": "submit"
          }
        },
        "timestamps": true
      },
      "VendorAction": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "action": {
              "type": "string"
            },
            "solicitation": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "VendorUpdate": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "action": {
              "type": "string"
            },
            "createdAt": {
              "type": "string"
            },
            "solicitation": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "timezone": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "EvaluationCriteriaOverview": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "title": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "evaluationGroup": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                }
              }
            },
            "criteria": {
              "type": "object",
              "properties": {
                "weight": {
                  "type": "number"
                },
                "pass_fail": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "EvaluatorActions": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "action": {
              "type": "string"
            },
            "evaluation": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string"
                },
                "solicitation": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string"
                    },
                    "typeId": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "EvaluatorUpdate": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "action": {
              "type": "string"
            },
            "createdAt": {
              "type": "string"
            },
            "evaluation": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "timezone": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "Subscription": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "companyId": {
            "type": "string"
          },
          "plan": {
            "type": "string"
          },
          "usersUsed": {
            "type": "integer"
          },
          "maxUsers": {
            "type": "integer"
          },
          "expiryDate": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "expired",
              "suspended"
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "companyId",
          "plan",
          "usersUsed",
          "maxUsers",
          "expiryDate",
          "status"
        ]
      },
      "Plan": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "price": {
            "type": "number"
          },
          "maxUsers": {
            "type": "integer"
          },
          "features": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isActive": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "name",
          "price",
          "maxUsers"
        ]
      },
      "SubscriptionDistriguntion": {
        "type": "object",
        "properties": {
          "totalActive": {
            "type": "number"
          },
          "distribution": {
            "type": "object",
            "properties": {
              "plan": {
                "type": "string",
                "enum": [
                  "Basic",
                  "Pro",
                  "Enterprise"
                ]
              },
              "count": {
                "type": "integer",
                "minimum": 0
              },
              "percentage": {
                "type": "number",
                "minimum": 0,
                "maximum": 100
              }
            }
          }
        }
      },
      "SuperAdminDashboardCount": {
        "type": "object",
        "properties": {
          "company": {
            "type": "object",
            "properties": {
              "allCompanies": {
                "type": "number"
              },
              "activeCompanies": {
                "type": "number"
              },
              "suspendedCompanies": {
                "type": "number"
              }
            }
          },
          "users": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "roleName": {
                  "type": "string"
                },
                "count": {
                  "type": "number"
                }
              }
            }
          }
        }
      },
      "Activities": {
        "type": "object",
        "properties": {
          "activities": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "object",
                  "properties": {
                    "year": {
                      "type": "integer",
                      "minimum": 2000,
                      "maximum": 9999
                    },
                    "month": {
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 12
                    },
                    "day": {
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 31
                    },
                    "hour": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 23
                    }
                  },
                  "required": [
                    "year",
                    "month",
                    "day",
                    "hour"
                  ]
                },
                "count": {
                  "type": "integer",
                  "minimum": 0
                }
              },
              "required": [
                "_id",
                "count"
              ]
            }
          }
        }
      },
      "TimeStats": {
        "type": "object",
        "properties": {
          "timeStats": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "label": {
                  "type": "string"
                },
                "total": {
                  "type": "integer"
                },
                "active": {
                  "type": "integer"
                },
                "expiring": {
                  "type": "integer",
                  "description": "Number of companies expiring soon"
                }
              },
              "required": [
                "label",
                "total",
                "active",
                "expiring"
              ]
            }
          }
        }
      },
      "NotificationSettings": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true,
            "description": "Unique identifier for the notification settings"
          },
          "userId": {
            "type": "string",
            "format": "uuid",
            "readOnly": true,
            "description": "Identifier of the user associated with these notification settings"
          },
          "newSolicitations": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "email",
                "sms",
                "push"
              ]
            },
            "description": "Notification preferences for new solicitations",
            "nullable": true
          },
          "proposalUpdates": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "email",
                "sms",
                "push"
              ]
            },
            "description": "Notification preferences for proposal updates",
            "nullable": true
          },
          "evaluationAssignments": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "email",
                "sms",
                "push"
              ]
            },
            "description": "Notification preferences for evaluation assignments",
            "nullable": true
          },
          "upcomingDeadlines": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "email",
                "sms",
                "push"
              ]
            },
            "description": "Notification preferences for upcoming deadlines",
            "nullable": true
          },
          "questionsUpdate": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "email",
                "sms",
                "push"
              ]
            },
            "description": "Notification preferences for questions updates",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Date and time when the notification settings were created"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Date and time when the notification settings were last updated"
          }
        },
        "required": [
          "newSolicitations",
          "proposalUpdates",
          "evaluationAssignments",
          "upcomingDeadlines",
          "questionsUpdate"
        ],
        "additionalProperties": false,
        "example": {
          "_id": "550e8400-e29b-41d4-a716-446655440000",
          "newSolicitations": [
            "email",
            "push"
          ],
          "proposalUpdates": [
            "sms"
          ],
          "evaluationAssignments": [],
          "upcomingDeadlines": [
            "email"
          ],
          "questionsUpdate": [
            "push"
          ],
          "createdAt": "2025-06-16T01:46:00Z",
          "updatedAt": "2025-06-16T01:46:00Z"
        }
      },
      "PortalSettings": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true,
            "description": "Unique identifier for the portal settings"
          },
          "companyId": {
            "type": "string",
            "format": "uuid",
            "readOnly": true,
            "description": "Identifier of the company associated with these portal settings"
          },
          "solicitationManagement": {
            "type": "boolean",
            "description": "Enable/disable solicitation management",
            "default": false
          },
          "evaluationsManagement": {
            "type": "boolean",
            "description": "Enable/disable evaluations management",
            "default": false
          },
          "vendorManagement": {
            "type": "boolean",
            "description": "Enable/disable vendor management",
            "default": false
          },
          "reportsAnalytics": {
            "type": "boolean",
            "description": "Enable/disable reports and analytics",
            "default": false
          },
          "vendorsQA": {
            "type": "boolean",
            "description": "Enable/disable vendors Q & A",
            "default": false
          },
          "generalUpdatesNotifications": {
            "type": "boolean",
            "description": "Enable/disable general updates/notifications",
            "default": false
          },
          "addendumManagement": {
            "type": "boolean",
            "description": "Enable/disable addendum management",
            "default": false
          },
          "myActions": {
            "type": "boolean",
            "description": "Enable/disable my actions",
            "default": false
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Date and time when the portal settings were created"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Date and time when the portal settings were last updated"
          }
        },
        "required": [
          "companyId",
          "solicitationManagement",
          "evaluationsManagement",
          "vendorManagement",
          "reportsAnalytics",
          "vendorsQA",
          "generalUpdatesNotifications",
          "addendumManagement",
          "myActions"
        ],
        "additionalProperties": false,
        "example": {
          "_id": "550e8400-e29b-41d4-a716-446655440000",
          "companyId": "e8e616e0-d894-4936-a3f5-391682ee794c",
          "solicitationManagement": false,
          "evaluationsManagement": true,
          "vendorManagement": false,
          "reportsAnalytics": true,
          "vendorsQA": false,
          "generalUpdatesNotifications": true,
          "addendumManagement": false,
          "myActions": true,
          "createdAt": "2025-06-16T02:28:00Z",
          "updatedAt": "2025-06-16T02:28:00Z"
        }
      },
      "AdminDetails": {
        "type": "object",
        "properties": {
          "details": {
            "type": "object"
          },
          "createdUsers": {
            "type": "number"
          }
        }
      },
      "TotalEvaluation": {
        "type": "object",
        "properties": {
          "month": {
            "type": "string"
          },
          "year": {
            "type": "number"
          },
          "onTime": {
            "type": "number",
            "example": 18
          },
          "late": {
            "type": "number",
            "example": 4
          },
          "pending": {
            "type": "number",
            "example": 10
          },
          "completed": {
            "type": "number",
            "example": 28
          }
        }
      },
      "ProposalSubmission": {
        "type": "object",
        "properties": {

        }
      },
      "MonthlyStats": {
        "type": "object",
        "properties": {
          "month": {
            "type": "string"
          },
          "year": {
            "type": "string"
          },
          "submitted": {
            "type": "integer"
          },
          "missedDeadline": {
            "type": "integer"
          },
          "declined": {
            "type": "integer"
          }
        }
      },
      "SubscriptionLogs": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          },
          "performedBy": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              }
            }
          }
        }
      },
      "SolicitationQuestion": {
        "type": "object",
        "properties": {
          "note": {
            "type": "string"
          },
          "user": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "role": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "responses": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "note": {
                  "type": "string"
                },
                "user": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "VendorInSolicitation": {
        "type": "object",
        "properties": {
          "vendorId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "score": {
            "type": "string"
          },
          "evaluatorCount": {
            "type": "number"
          },
          "totalEvaluators": {
            "type": "number"
          }
        }
      },
      "ViewVendorProposalResponse": {
        "type": "object",
        "properties": {
          "proposalDetails": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "vendor": {
                "type": "string"
              },
              "contact": {
                "type": "string",
                "nullable": true
              },
              "ref": {
                "type": "string"
              },
              "submissiion": {
                "type": "string",
                "format": "date-time"
              },
              "status": {
                "type": "string"
              },
              "score": {
                "type": "number"
              },
              "proposalEvaluators": {
                "type": "integer",
                "nullable": true
              },
              "allEvaluators": {
                "type": "integer",
                "nullable": true
              }
            }
          },
          "overview": {
            "type": "object",
            "properties": {
              "evaluation": {
                "type": "number"
              },
              "uploads": {
                "type": "integer"
              },
              "criteria": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string"
                    },
                    "criteria": {
                      "type": "object"
                    },
                    "scoring": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "submittedDocument": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "size": {
                  "type": "string"
                },
                "uploadedAt": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          }
        }
      },
      "EvaluationScoreCardResponse": {
        "type": "object",
        "properties": {
          "evaluator": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "email": {
                "type": "string"
              },
              "submission": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              "status": {
                "type": "string"
              },
              "score": {
                "type": "number"
              }
            }
          },
          "criteria": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "comment": {
                  "type": "string",
                  "nullable": true
                },
                "criteria": {
                  "type": "object",
                  "nullable": true
                },
                "score": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "BidComparisonResponse": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "proposalId": {
              "type": "string"
            },
            "vendorName": {
              "type": "string",
              "nullable": true
            },
            "vendorEmail": {
              "type": "string",
              "nullable": true
            },
            "total": {
              "type": "number",
              "nullable": true
            },
            "score": {
              "type": "number",
              "nullable": true
            },
            "submission": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "rank": null
          }
        }
      },
      "ProposalPriceAction": {
        "type": "object",
        "properties": {
          "component": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "quantity": {
            "type": "number"
          },
          "unitOfMeasurement": {
            "type": "string"
          },
          "unitPrice": {
            "type": "number"
          },
          "subtotal": {
            "type": "number"
          },
          "subItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProposalPriceAction"
            }
          }
        }
      },
      "ViewEvaluatorScore": {
        "type": null,
        "properties": {
          "averageScore": {
            "type": "number"
          },
          "allEvaluators": {
            "type": "number"
          },
          "submittedEvaluators": {
            "type": "number"
          },
          "evaluators": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "dateAssigned": {
                  "type": "string",
                  "format": "date-time",
                  "nullable": true
                },
                "dateSubmitted": {
                  "type": "string",
                  "format": "date-time"
                },
                "status": {
                  "type": "string"
                },
                "score": {
                  "type": null
                }
              }
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/admins": {
      "get": {
        "summary": "Retrieve a list of admins",
        "description": "Fetches a paginated list of admins with optional filters.",
        "tags": [
          "SuperAdmin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "description": "Page number"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10,
              "description": "Items per page"
            }
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string",
              "description": "Search term for admin email"
            }
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "pending",
                "active",
                "inactive"
              ],
              "description": "Filter by admin status"
            }
          },
          {
            "in": "query",
            "name": "role",
            "schema": {
              "type": "string",
              "enum": [
                "company_admin",
                "super_admin"
              ],
              "description": "Filter by admin role"
            }
          },
          {
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "description": "Filter by last login date range (format: from-to or from or to)\n"
            }
          },
          {
            "in": "query",
            "name": "companyId",
            "schema": {
              "type": "string",
              "description": "compnay id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with admin list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "integer"
                        },
                        "page": {
                          "type": "integer"
                        },
                        "limit": {
                          "type": "integer"
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/User"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/admins/system-logs": {
      "get": {
        "summary": "Retrieve a list of system logs",
        "description": "Fetches a paginated list of system logs with optional filters.",
        "tags": [
          "SuperAdmin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "description": "Page number"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10,
              "description": "Items per page"
            }
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string",
              "description": "Search term for action type, performed by, or target affected"
            }
          },
          {
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string"
            },
            "description": "Filter by creation date range (format: from-to or from or to)\n"
          },
          {
            "in": "query",
            "name": "actionType",
            "schema": {
              "type": "string",
              "description": "Filter by action type"
            }
          },
          {
            "in": "query",
            "name": "performedBy",
            "schema": {
              "type": "string",
              "description": "Filter by performed by (user ID)"
            }
          },
          {
            "in": "query",
            "name": "targetAffected",
            "schema": {
              "type": "string",
              "description": "Filter by target affected (company ID)"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with system logs list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "integer"
                        },
                        "page": {
                          "type": "integer"
                        },
                        "limit": {
                          "type": "integer"
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "_id": {
                                "type": "string"
                              },
                              "actionType": {
                                "type": "string"
                              },
                              "performedBy": {
                                "type": "object",
                                "properties": {
                                  "_id": {
                                    "type": "string"
                                  },
                                  "name": {
                                    "type": "string"
                                  }
                                }
                              },
                              "targetAffected": {
                                "type": "object",
                                "properties": {
                                  "_id": {
                                    "type": "string"
                                  },
                                  "name": {
                                    "type": "string"
                                  }
                                }
                              },
                              "createdAt": {
                                "type": "string",
                                "format": "date-time"
                              },
                              "updatedAt": {
                                "type": "string",
                                "format": "date-time"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/admins/portal-settings/{companyId}": {
      "get": {
        "summary": "Retrieve portal settings",
        "description": "Fetches the portal settings for a specific company.",
        "tags": [
          "SuperAdmin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "companyId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the company"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with portal settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalSettings"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Portal settings not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update portal settings",
        "description": "Updates the portal settings for a specific company.",
        "tags": [
          "SuperAdmin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "companyId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the company"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "- \u003Cb\u003EsolicitationManagement\u003C/b\u003E: Boolean to enable/disable solicitation management. Optional. If not provided, the existing value is retained.\n- \u003Cb\u003EevaluationsManagement\u003C/b\u003E: Boolean to enable/disable evaluations management. Optional. If not provided, the existing value is retained.\n- \u003Cb\u003EvendorManagement\u003C/b\u003E: Boolean to enable/disable vendor management. Optional. If not provided, the existing value is retained.\n- \u003Cb\u003EreportsAnalytics\u003C/b\u003E: Boolean to enable/disable reports and analytics. Optional. If not provided, the existing value is retained.\n- \u003Cb\u003EvendorsQA\u003C/b\u003E: Boolean to enable/disable vendors Q & A. Optional. If not provided, the existing value is retained.\n- \u003Cb\u003EgeneralUpdatesNotifications\u003C/b\u003E: Boolean to enable/disable general updates/notifications. Optional. If not provided, the existing value is retained.\n- \u003Cb\u003EaddendumManagement\u003C/b\u003E: Boolean to enable/disable addendum management. Optional. If not provided, the existing value is retained.\n- \u003Cb\u003EmyActions\u003C/b\u003E: Boolean to enable/disable my actions. Optional. If not provided, the existing value is retained.\n- Only the provided fields will be updated; others remain unchanged.\n- \u003Cb\u003EcompanyId\u003C/b\u003E is managed by the server via the path parameter and should not be included in the request body.\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "solicitationManagement": {
                    "type": "boolean",
                    "description": "Enable/disable solicitation management",
                    "nullable": true
                  },
                  "evaluationsManagement": {
                    "type": "boolean",
                    "description": "Enable/disable evaluations management",
                    "nullable": true
                  },
                  "vendorManagement": {
                    "type": "boolean",
                    "description": "Enable/disable vendor management",
                    "nullable": true
                  },
                  "reportsAnalytics": {
                    "type": "boolean",
                    "description": "Enable/disable reports and analytics",
                    "nullable": true
                  },
                  "vendorsQA": {
                    "type": "boolean",
                    "description": "Enable/disable vendors Q & A",
                    "nullable": true
                  },
                  "generalUpdatesNotifications": {
                    "type": "boolean",
                    "description": "Enable/disable general updates/notifications",
                    "nullable": true
                  },
                  "addendumManagement": {
                    "type": "boolean",
                    "description": "Enable/disable addendum management",
                    "nullable": true
                  },
                  "myActions": {
                    "type": "boolean",
                    "description": "Enable/disable my actions",
                    "nullable": true
                  }
                },
                "additionalProperties": false
              },
              "example": {
                "solicitationManagement": true,
                "evaluationsManagement": false,
                "vendorManagement": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response with updated portal settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalSettings"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Portal settings not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/admins/dashboard": {
      "get": {
        "summary": "Retrieve dashboard stats",
        "description": "Fetches the dashboard stats for a specific company.",
        "tags": [
          "CompanyAdmin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with portal settings",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "evaluators": {
                          "type": "integer"
                        },
                        "allSolicitations": {
                          "type": "integer"
                        },
                        "allEvaluation": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Portal settings not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/admins/dashboard/role-distribution": {
      "get": {
        "summary": "Company role distribution",
        "description": "Fetches company role distribution",
        "tags": [
          "CompanyAdmin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "range",
            "schema": {
              "type": "sting",
              "default": "12months",
              "description": "range"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "roleName": {
                            "type": "string"
                          },
                          "count": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/admins/dashboard/general-updates": {
      "get": {
        "summary": "General update",
        "description": "Limit updates to ten",
        "tags": [
          "CompanyAdmin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/VendorUpdate"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/admins/{id}/status": {
      "put": {
        "summary": "Update admin status",
        "description": "Updates the status of a specific admin by ID.",
        "tags": [
          "SuperAdmin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Admin ID"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "- \u003Cb\u003Estatus\u003C/b\u003E - New status for the admin. Values: active | inactive.\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": [
                      "active",
                      "inactive"
                    ]
                  }
                },
                "required": [
                  "status"
                ]
              },
              "example": {
                "status": "active"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Admin status updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Admin not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/admins/{adminId}": {
      "get": {
        "summary": "View admin details",
        "description": "View admin details by ID.",
        "tags": [
          "SuperAdmin",
          "CompanyAdmin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "adminId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Admin ID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/AdminDetails"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Admin not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/delete/{adminId}": {
      "delete": {
        "summary": "Delete admin",
        "description": "Delete admin by ID.",
        "tags": [
          "SuperAdmin",
          "CompanyAdmin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "adminId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Admin ID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Admin not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "summary": "Login to the portal",
        "description": "Login to access resources, if login is after two only token is sent, the user needs to verify the account usin the orp send to thier email address",
        "tags": [
          "Admin",
          "Vendor",
          "ProcurementLead",
          "SuperAdmin"
        ],
        "security": [],
        "requestBody": {
          "required": true,
          "description": "\u003Cb\u003Eemail\u003C/b\u003E\u003Cbr\u003EEmail address\u003C/br\u003E \u003Cb\u003Epassword\u003C/b\u003E\u003Cbr\u003Epassword\u003C/br\u003E",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "password": {
                    "type": "string",
                    "format": "password"
                  }
                },
                "example": {
                  "email": "invite@gmail.com",
                  "password": "@password123"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "token": {
                          "type": "string"
                        },
                        "user": {
                          "$ref": "#/components/schemas/User"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/auth/forgot-password": {
      "post": {
        "summary": "Forget password",
        "description": "Request for forget password",
        "tags": [
          "Admin",
          "Vendor",
          "ProcurementLead",
          "SuperAdmin"
        ],
        "security": [],
        "requestBody": {
          "required": true,
          "description": "\u003Cb\u003Eemail\u003C/b\u003E\u003Cbr\u003EEmail address\u003C/br\u003E",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  }
                },
                "example": {
                  "email": "invite@gmail.com"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "token sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "user not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/auth/reset-password": {
      "post": {
        "summary": "Reset password",
        "description": "Reset password",
        "tags": [
          "Admin",
          "Vendor",
          "ProcurementLead",
          "SuperAdmin"
        ],
        "security": [],
        "requestBody": {
          "required": true,
          "description": "\u003Cb\u003Epassword\u003C/b\u003E\u003Cbr\u003Enew password after validating on front end\u003C/br\u003E \u003Cb\u003Etoken\u003C/b\u003E\u003Cbr\u003Ereset token\u003C/br\u003E",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "password": {
                    "type": "string",
                    "format": "password"
                  },
                  "token": {
                    "type": "string"
                  }
                },
                "example": {
                  "password": "update_Passsword1",
                  "token": "lonttokenstring"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "user not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/auth/verify-otp": {
      "post": {
        "summary": "Verify otp",
        "description": "Otp is generated after two weeks of login, attach the token as bearer token to access this route",
        "tags": [
          "Admin",
          "Vendor",
          "ProcurementLead",
          "SuperAdmin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "description": "\u003Cb\u003Eotp\u003C/b\u003E\u003Cbr\u003Eotp received fro email - length = 6\u003C/br\u003E",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "otp": {
                    "type": "string"
                  }
                },
                "example": {
                  "password": "update_Passsword1",
                  "token": "lonttokenstring"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "token": {
                          "type": "string"
                        },
                        "user": {
                          "$ref": "#/components/schemas/User"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "user not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/companies/me": {
      "get": {
        "summary": "Retrieve company detail",
        "description": "Fetches a paginated list of companies with optional filters.",
        "tags": [
          "CompanyAdmin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/companies": {
      "get": {
        "summary": "Retrieve a list of companies",
        "description": "Fetches a paginated list of companies with optional filters.",
        "tags": [
          "SuperAdmin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "description": "Page number"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10,
              "description": "Items per page"
            }
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "inactive"
              ],
              "description": "Filter by company status"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string",
              "description": "Search term for company name"
            }
          },
          {
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "description": "Filter by creation date range (format: from-to or from or to)\n"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with company list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "integer"
                        },
                        "page": {
                          "type": "integer"
                        },
                        "limit": {
                          "type": "integer"
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/CompanyDetails"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/companies/list": {
      "get": {
        "summary": "View company list",
        "description": "List allcompanies for dropdown.",
        "tags": [
          "SuperAdmin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with company list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "id": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/companies/dashboard": {
      "get": {
        "summary": "Portal details card",
        "description": "Fetch and display portal details card for super admin",
        "tags": [
          "SuperAdmin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/SuperAdminDashboardCount"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/companies/dashboard/sub-distribution": {
      "get": {
        "summary": "Portal subscription distribution",
        "description": "Fetch and display portal subscription distribution",
        "tags": [
          "SuperAdmin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/SubscriptionDistriguntion"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/companies/dashboard/weekly-activities": {
      "get": {
        "summary": "Weekly activites",
        "description": "Fetches company weekly activities.",
        "tags": [
          "SuperAdmin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "range",
            "schema": {
              "type": "sting",
              "default": 1,
              "description": "data range"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with company list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "solicitation": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Activities"
                          }
                        },
                        "evaluation": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Activities"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/companies/dashboard/company-status": {
      "get": {
        "summary": "Company status",
        "description": "Fetches company status",
        "tags": [
          "SuperAdmin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "range",
            "schema": {
              "type": "sting",
              "default": 1,
              "description": "data range"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TimeStats"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/companies/dashboard/role-distribution": {
      "get": {
        "summary": "Company role distribution",
        "description": "Fetches company role distribution",
        "tags": [
          "SuperAdmin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "range",
            "schema": {
              "type": "sting",
              "default": "12months",
              "description": "range"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "roleName": {
                            "type": "string"
                          },
                          "count": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/companies/dashboard/module-usage": {
      "get": {
        "summary": "Company module usage",
        "description": "Fetches company module usage",
        "tags": [
          "SuperAdmin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "range",
            "schema": {
              "type": "sting",
              "default": 1,
              "description": "data range"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "solicitationUsage": {
                          "type": "number"
                        },
                        "evaluationUsage": {
                          "type": "number"
                        },
                        "vendorUsage": {
                          "type": "number"
                        },
                        "adendumUsage": {
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/companies/{companyId}": {
      "get": {
        "summary": "Get company details by ID",
        "tags": [
          "SuperAdmin"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "companyId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The company ID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/CompanyDetails"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Company not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "update company",
        "description": "Super admin can update a company",
        "tags": [
          "SuperAdmin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "companyId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "ID of the company"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "- \u003Cb\u003Ename\u003C/b\u003E - Company name. Required.\n- \u003Cb\u003Eindustry\u003C/b\u003E - Company industry. Optional.\n- \u003Cb\u003EsizeCategory\u003C/b\u003E - Company size - small | medium | large\n- \u003Cb\u003Edomain\u003C/b\u003E - Company domain. Optional.\n- \u003Cb\u003EplanName\u003C/b\u003E - Plan name. Required.\n- \u003Cb\u003Eduration\u003C/b\u003E - Duration in years. Must be a positive integer. Required.\n- \u003Cb\u003EadminEmails\u003C/b\u003E - Array of admin email addresses. Must be valid emails. Optional.\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Company name"
                  },
                  "industry": {
                    "type": "string",
                    "description": "Company industry"
                  },
                  "sizeCategory": {
                    "type": "string",
                    "enum": [
                      "small",
                      "medium",
                      "large"
                    ],
                    "description": "Company size"
                  },
                  "domain": {
                    "type": "string",
                    "description": "Company domain"
                  },
                  "planName": {
                    "type": "string",
                    "description": "Plan name"
                  },
                  "duration": {
                    "type": "integer",
                    "description": "Duration in years"
                  },
                  "adminEmails": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "email"
                    },
                    "description": "Array of admin email addresses"
                  },
                  "createdBy": {
                    "type": "string",
                    "description": "ID of the user who created the company"
                  }
                },
                "required": [
                  "name",
                  "planName",
                  "duration"
                ]
              },
              "example": {
                "name": "AIG",
                "industry": "IT",
                "sizeCategory": "large",
                "domain": "aig.com",
                "planName": "Basic Plan - 20 Users",
                "duration": 2,
                "adminEmails": [
                  "admin@aig.com",
                  "admin2@aig.com"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Company"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "409": {
            "description": "Company already exists",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "number",
                      "example": 409
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/companies/{id}/status": {
      "put": {
        "summary": "Update company status",
        "description": "Updates the status of a specific company by ID.",
        "tags": [
          "SuperAdmin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Company ID"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "- \u003Cb\u003Estatus\u003C/b\u003E - New status for the company (active | inactive).\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": [
                      "active",
                      "inactive"
                    ]
                  }
                },
                "required": [
                  "status"
                ]
              },
              "example": {
                "status": "active"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Company status updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/CompanyDetails"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Company not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/evaluator/dashboard/my-actions": {
      "get": {
        "summary": "View  evaluator recent actions",
        "description": "EvaluatRecent actions",
        "tags": [
          "Evaluator"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/MyAction"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/evaluator/dashboard/evalutions-update": {
      "get": {
        "summary": "View  evaluation recent updates",
        "description": "EvaluatRecent recent activity",
        "tags": [
          "Evaluator"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/EvaluationActivity"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/evaluator/my-evaluations": {
      "get": {
        "summary": "View assigned evaluation list",
        "description": "Query and filter evaluations",
        "tags": [
          "Procurement-Evaluation",
          "Evaluator"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "Draft",
                "Pending",
                "InActive",
                "Completed",
                "Active",
                "Suspended"
              ],
              "description": "status - Draft | Pending | InActive | Completed | Active | Suspended"
            }
          },
          {
            "in": "query",
            "name": "category",
            "schema": {
              "type": "string",
              "description": "category id"
            }
          },
          {
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "description": "date range yyyy-mm-dd-yyyy-mm-dd"
            }
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "description": "list page"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "string",
              "description": "list limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Evaluations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AssignedEvaluation"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/evaluator/{evaluationId}/evaluation-group/{evaluationGroupId}": {
      "get": {
        "summary": "View Vendors in evaluation group",
        "description": "Evaluation group details",
        "tags": [
          "Procurement-Evaluation",
          "Evaluator"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "evaluationId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "evaluationId"
            }
          },
          {
            "in": "path",
            "name": "evaluationGroupId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "evaluationGroupId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Evaluations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "vendors": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/EvaluatorEvaluationGroup"
                          }
                        },
                        "info": {
                          "$ref": "#/components/schemas/EvaluatorEvaluaionDetail"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Evaluation group / Evaluation not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/evaluator/{evaluationId}/submitted-document/{vendorId}": {
      "get": {
        "summary": "View View vendor submitted document",
        "description": "Submitted document",
        "tags": [
          "Procurement-Evaluation",
          "Evaluator"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "evaluationId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "evaluationId"
            }
          },
          {
            "in": "path",
            "name": "vendorId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "vendorId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Evaluations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "documents": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/VendorDocument"
                          }
                        },
                        "info": {
                          "$ref": "#/components/schemas/EvaluatorEvaluaionDetail"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Evaluation criteria not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/evaluator/{evaluationId}/criteria": {
      "get": {
        "summary": "View Criteria details",
        "description": "Evaluation criteria",
        "tags": [
          "Procurement-Evaluation",
          "Evaluator"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "evaluationId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "evaluationId"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "criteria": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/EvaluatorCriteria"
                          }
                        },
                        "info": {
                          "$ref": "#/components/schemas/EvaluatorEvaluaionDetail"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Evaluation criteria not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/evaluator/{evaluationId}/criteria-score/{criteriaId}/vendor/{vendorId}": {
      "post": {
        "summary": "Score an evaluation criteria for a vendor",
        "description": "Submit a score for a specific evaluation criteria. The score format depends on the criteria type.",
        "tags": [
          "Procurement-Evaluation",
          "Evaluator"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "evaluationId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique identifier of the evaluation"
            }
          },
          {
            "in": "path",
            "name": "criteriaId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique identifier of the criteria being scored"
            }
          },
          {
            "in": "path",
            "name": "vendorId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique identifier of the vendor to scored"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "The scoring data for the evaluation criteria.\n\nValidation Rules:\n- For 'pass_fail' type, score must be a string (e.g., \"pass\", \"fail\")\n- For 'weight' type, score must be a numeric value\n- Type must be either 'pass_fail' or 'weight'\n- Comment is optional\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "comment": {
                    "type": "string",
                    "description": "Optional remarks about the scoring decision",
                    "example": "Vendor exceeded expectations in this area",
                    "maxLength": 500
                  },
                  "score": {
                    "description": "The evaluation score. Format depends on criteria type:\n- String for 'pass_fail'\n- Number for 'weight'\n",
                    "oneOf": [
                      {
                        "type": "string",
                        "example": "pass"
                      },
                      {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 100,
                        "example": 85
                      }
                    ]
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "pass_fail",
                      "weight"
                    ],
                    "description": "The type of evaluation criteria.\nDetermines the format of the score field.\n",
                    "example": "weight"
                  }
                },
                "required": [
                  "score",
                  "type"
                ],
                "example": {
                  "comment": "Met all required specifications",
                  "score": 90,
                  "type": "weight"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully recorded the criteria score",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Score recorded successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "evaluationId": {
                          "type": "string"
                        },
                        "criteriaId": {
                          "type": "string"
                        },
                        "score": {
                          "type": [
                            "string",
                            "number"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Evaluation criteria not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Score must be a string for 'pass_fail' and a number for 'weight'"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "path": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/evaluator/{evaluationId}/submit-evaluation/vendor/{vendorId}": {
      "post": {
        "summary": "Submit Evaluation",
        "description": "Submit evaluation criteria",
        "tags": [
          "Procurement-Evaluation",
          "Evaluator"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "evaluationId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "evaluationId"
            }
          },
          {
            "in": "path",
            "name": "vendorId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "vendorId"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Evaluation not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/notifications/settings": {
      "get": {
        "summary": "Retrieve notification settings for profile",
        "description": "Fetches the notification preferences and timestamps for the authenticated user.",
        "tags": [
          "CompanyAdmin",
          "Evaluator",
          "Vendor",
          "ProcurementLead"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with notification settings",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/NotificationSettings"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Notification settings not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update notification settings",
        "description": "Updates the notification preferences for the authenticated user.",
        "tags": [
          "CompanyAdmin",
          "Evaluator",
          "Vendor",
          "ProcurementLead"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "description": "- \u003Cb\u003EnewSolicitations\u003C/b\u003E: Array of notification methods (email | sms | push). Optional. If not provided, the existing value is retained.\n- \u003Cb\u003EproposalUpdates\u003C/b\u003E: Array of notification methods (email | sms | push). Optional. If not provided, the existing value is retained.\n- \u003Cb\u003EevaluationAssignments\u003C/b\u003E: Array of notification methods (email | sms | push). Optional. If not provided, the existing value is retained.\n- \u003Cb\u003EupcomingDeadlines\u003C/b\u003E: Array of notification methods (email | sms | push). Optional. If not provided, the existing value is retained.\n- \u003Cb\u003EquestionsUpdate\u003C/b\u003E: Array of notification methods (email | sms | push). Optional. If not provided, the existing value is retained.\n- Only the provided fields will be updated; others remain unchanged.\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "newSolicitations": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "email",
                        "sms",
                        "push"
                      ]
                    },
                    "description": "Notification preferences for new solicitations",
                    "nullable": true
                  },
                  "proposalUpdates": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "email",
                        "sms",
                        "push"
                      ]
                    },
                    "description": "Notification preferences for proposal updates",
                    "nullable": true
                  },
                  "evaluationAssignments": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "email",
                        "sms",
                        "push"
                      ]
                    },
                    "description": "Notification preferences for evaluation assignments",
                    "nullable": true
                  },
                  "upcomingDeadlines": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "email",
                        "sms",
                        "push"
                      ]
                    },
                    "description": "Notification preferences for upcoming deadlines",
                    "nullable": true
                  },
                  "questionsUpdate": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "email",
                        "sms",
                        "push"
                      ]
                    },
                    "description": "Notification preferences for questions updates",
                    "nullable": true
                  }
                },
                "additionalProperties": false
              },
              "example": {
                "newSolicitations": [
                  "email",
                  "push"
                ],
                "proposalUpdates": [
                  "sms"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response with updated notification settings",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/NotificationSettings"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Notification settings not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/notifications/settings/{companyId}": {
      "get": {
        "summary": "Retrieve notification settings",
        "description": "Fetches the notification preferences and timestamps for the authenticated user.",
        "tags": [
          "SuperAdmin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "companyId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The id of the company"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with notification settings",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/NotificationSettings"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Notification settings not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update notification settings",
        "description": "Updates the notification preferences for the authenticated user.",
        "tags": [
          "SuperAdmin",
          "CompanyAdmin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "companyId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The id of the company"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "- \u003Cb\u003EnewSolicitations\u003C/b\u003E: Array of notification methods (email | sms | push). Optional. If not provided, the existing value is retained.\n- \u003Cb\u003EproposalUpdates\u003C/b\u003E: Array of notification methods (email | sms | push). Optional. If not provided, the existing value is retained.\n- \u003Cb\u003EevaluationAssignments\u003C/b\u003E: Array of notification methods (email | sms | push). Optional. If not provided, the existing value is retained.\n- \u003Cb\u003EupcomingDeadlines\u003C/b\u003E: Array of notification methods (email | sms | push). Optional. If not provided, the existing value is retained.\n- \u003Cb\u003EquestionsUpdate\u003C/b\u003E: Array of notification methods (email | sms | push). Optional. If not provided, the existing value is retained.\n- Only the provided fields will be updated; others remain unchanged.\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "newSolicitations": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "email",
                        "sms",
                        "push"
                      ]
                    },
                    "description": "Notification preferences for new solicitations",
                    "nullable": true
                  },
                  "proposalUpdates": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "email",
                        "sms",
                        "push"
                      ]
                    },
                    "description": "Notification preferences for proposal updates",
                    "nullable": true
                  },
                  "evaluationAssignments": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "email",
                        "sms",
                        "push"
                      ]
                    },
                    "description": "Notification preferences for evaluation assignments",
                    "nullable": true
                  },
                  "upcomingDeadlines": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "email",
                        "sms",
                        "push"
                      ]
                    },
                    "description": "Notification preferences for upcoming deadlines",
                    "nullable": true
                  },
                  "questionsUpdate": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "email",
                        "sms",
                        "push"
                      ]
                    },
                    "description": "Notification preferences for questions updates",
                    "nullable": true
                  }
                },
                "additionalProperties": false
              },
              "example": {
                "newSolicitations": [
                  "email",
                  "push"
                ],
                "proposalUpdates": [
                  "sms"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response with updated notification settings",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/NotificationSettings"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Notification settings not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/onboarding/add-user": {
      "post": {
        "summary": "Send invite to other roles",
        "description": "Admin invites other users/roles to the platform",
        "tags": [
          "CompanyAdmin",
          "SuperAdmin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "description": "\u003Cb\u003Eemail\u003C/b\u003E - Email address\u003Cbr\u003E\n\u003Cb\u003Erole\u003C/b\u003E - Role name (company_admin | procurement | evaluator)\u003Cbr\u003E\n\u003Cb\u003EfirstName\u003C/b\u003E - First name (optional)\u003Cbr\u003E\n\u003Cb\u003EmiddleName\u003C/b\u003E - Middle name (optional)\u003Cbr\u003E\n\u003Cb\u003ElastName\u003C/b\u003E - Last name (optional)\n\u003Cb\u003EcompanyId\u003C/b\u003E - Company Id\n\u003Cb\u003E employeeId\u003C/b\u003E - optional\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "role": {
                    "type": "string",
                    "enum": [
                      "company_admin",
                      "procurement",
                      "evaluator"
                    ]
                  },
                  "firstName": {
                    "type": "string",
                    "nullable": true
                  },
                  "middleName": {
                    "type": "string",
                    "nullable": true
                  },
                  "lastName": {
                    "type": "string",
                    "nullable": true
                  }
                },
                "required": [
                  "email",
                  "role"
                ],
                "example": {
                  "email": "invite@gmail.com",
                  "role": "company_admin",
                  "firstName": "John",
                  "middleName": "A",
                  "lastName": "Doe",
                  "companyId": "MongoId",
                  "employeeId": 111
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Invite sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Account not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "User already exists",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "number",
                      "example": 409
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/onboarding/add-many-user": {
      "post": {
        "summary": "Upload spreadsheet",
        "description": "create many users with different roles",
        "tags": [
          "SuperAdmin",
          "CompanyAdmin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "description": "\u003Cb\u003Edoc\u003C/b\u003E\u003Cbr\u003EUpload spreadsheet\u003C/br\u003E",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "doc": {
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": [
                  "doc"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Vendor created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Vendor"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Company not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/onboarding/user-accept": {
      "post": {
        "summary": "Onboard user | Registratio",
        "description": "Register new user",
        "tags": [
          "CompanyAdmin",
          "ProcurementLead",
          "Evaluator"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "description": "\u003Cb\u003Ename\u003C/b\u003E - Name - optional\u003Cbr\u003E\n\u003Cb\u003Epassword\u003C/b\u003E - password)\u003Cbr\u003E\n\u003Cb\u003Etoken\u003C/b\u003E - token from email\u003Cbr\u003E\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "token": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  }
                },
                "required": [
                  "token",
                  "password"
                ],
                "example": {
                  "name": "new user name",
                  "token": "token",
                  "password": "Joh!213n"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/onboarding/vendor-accept": {
      "post": {
        "summary": "Onboard vendor | Registration",
        "description": "Register new vendor by completing the onboarding process",
        "tags": [
          "Vendor"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Vendor registration details including:\n- \u003Cb\u003Etoken\u003C/b\u003E - Verification token from email (required)\n- \u003Cb\u003Epassword\u003C/b\u003E - Account password (min 8 characters, required)\n- \u003Cb\u003Ename\u003C/b\u003E - Vendor name\n- \u003Cb\u003Ecategory\u003C/b\u003E - Business category\n- \u003Cb\u003EbusinessType\u003C/b\u003E - Type of business\n- \u003Cb\u003Elocation\u003C/b\u003E - Business location\n- \u003Cb\u003Ephone\u003C/b\u003E - Contact phone number\n- \u003Cb\u003Ewebsite\u003C/b\u003E - Company website URL (optional)\n- \u003Cb\u003Efiles\u003C/b\u003E - Array of document files with name, url, size, and type\n- \u003Cb\u003Etimezone\u003C/b\u003E - timezone of the vendor\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "Verification token from email"
                  },
                  "password": {
                    "type": "string",
                    "minLength": 8,
                    "description": "Account password"
                  },
                  "name": {
                    "type": "string",
                    "description": "Vendor name"
                  },
                  "category": {
                    "type": "string",
                    "description": "Business category"
                  },
                  "businessType": {
                    "type": "string",
                    "description": "Type of business"
                  },
                  "location": {
                    "type": "string",
                    "description": "Business location"
                  },
                  "timezone": {
                    "type": "string",
                    "description": "Business timezone"
                  },
                  "phone": {
                    "type": "string",
                    "description": "Contact phone number"
                  },
                  "website": {
                    "type": "string",
                    "format": "uri",
                    "description": "Company website URL"
                  },
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "url": {
                          "type": "string"
                        },
                        "size": {
                          "type": "string"
                        },
                        "type": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "required": [
                  "token",
                  "password"
                ],
                "example": {
                  "token": "email-verification-token",
                  "password": "SecureP@ss123",
                  "name": "Vendor Inc.",
                  "category": "Wholesale",
                  "businessType": "Distributor",
                  "location": "New York, USA",
                  "phone": "+1234567890",
                  "website": "https://vendor.example.com",
                  "files": [
                    {
                      "name": "business_license.pdf",
                      "url": "https://example.com/docs/license.pdf",
                      "size": "2.5MB",
                      "type": "application/pdf"
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Vendor registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/onboarding/company": {
      "post": {
        "summary": "Create new company",
        "description": "Super admin can create a company",
        "tags": [
          "SuperAdmin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "description": "- \u003Cb\u003Ename\u003C/b\u003E - Company name. Required.\n- \u003Cb\u003Eindustry\u003C/b\u003E - Company industry. Optional.\n- \u003Cb\u003EsizeCategory\u003C/b\u003E - Company size - small | medium | large\n- \u003Cb\u003Edomain\u003C/b\u003E - Company domain. Optional.\n- \u003Cb\u003EplanName\u003C/b\u003E - Plan name. Required.\n- \u003Cb\u003Eduration\u003C/b\u003E - Duration in years. Must be a positive integer. Required.\n- \u003Cb\u003EadminEmails\u003C/b\u003E - Array of admin email addresses. Must be valid emails. Optional.\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Company name"
                  },
                  "industry": {
                    "type": "string",
                    "description": "Company industry"
                  },
                  "sizeCategory": {
                    "type": "string",
                    "enum": [
                      "small",
                      "medium",
                      "large"
                    ],
                    "description": "Company size"
                  },
                  "domain": {
                    "type": "string",
                    "description": "Company domain"
                  },
                  "planName": {
                    "type": "string",
                    "description": "Plan name"
                  },
                  "duration": {
                    "type": "integer",
                    "description": "Duration in years"
                  },
                  "adminEmails": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "email"
                    },
                    "description": "Array of admin email addresses"
                  },
                  "createdBy": {
                    "type": "string",
                    "description": "ID of the user who created the company"
                  }
                },
                "required": [
                  "name",
                  "planName",
                  "duration"
                ]
              },
              "example": {
                "name": "AIG",
                "industry": "IT",
                "sizeCategory": "large",
                "domain": "aig.com",
                "planName": "Basic Plan - 20 Users",
                "duration": 2,
                "adminEmails": [
                  "admin@aig.com",
                  "admin2@aig.com"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Company created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Company"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "409": {
            "description": "Company already exists",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "number",
                      "example": 409
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/onboarding/roles": {
      "get": {
        "summary": "View roles",
        "description": "Super admin / admin can view roles",
        "tags": [
          "SuperAdmin",
          "Admin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Company created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/onboarding/remind-invite": {
      "post": {
        "summary": "Remind user about pending invite",
        "description": "Send a reminder email to a user with a pending invite",
        "tags": [
          "CompanyAdmin",
          "SuperAdmin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "email",
            "required": true,
            "schema": {
              "type": "string",
              "format": "email"
            },
            "description": "Email address of the user to remind",
            "example": "user@example.com"
          }
        ],
        "responses": {
          "200": {
            "description": "Invite reminder sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Invite not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "422": {
            "description": "Validation error - Email parameter required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/evaluations/dashboard": {
      "get": {
        "summary": "View  evaluation dashboard",
        "description": "Evaluations status summary on card",
        "tags": [
          "Procurement-Evaluation",
          "Evaluator"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "number"
                        },
                        "Active": {
                          "type": "number"
                        },
                        "Inactive": {
                          "type": "number"
                        },
                        "Suspended": {
                          "type": "number"
                        },
                        "Pending": {
                          "type": "number"
                        },
                        "Completed": {
                          "type": "number"
                        },
                        "Draft": {
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Company not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/evaluations": {
      "get": {
        "summary": "View all evaluation list",
        "description": "Query and filter vendors",
        "tags": [
          "Procurement-Evaluation",
          "Company-Evaluation"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string",
              "description": "solicitation name"
            }
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "Draft",
                "Pending",
                "InActive",
                "Completed",
                "Active",
                "Suspended"
              ],
              "description": "status - Draft | Pending | InActive | Completed | Active | Suspended"
            }
          },
          {
            "in": "query",
            "name": "category",
            "schema": {
              "type": "string",
              "description": "category id"
            }
          },
          {
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "description": "date range yyyy-mm-dd-yyyy-mm-dd"
            }
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "description": "list page"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "string",
              "description": "list limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Evaluations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Evaluation"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "create new evaluation",
        "description": "Procurement lead can create new evaluation",
        "tags": [
          "Procurement-Evaluation"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Evaluation creation payload containing all necessary information to set up a new evaluation process. \u003Cbr\u003E\u003Cbr\u003E \u003Cb\u003ERequired fields:\u003C/b\u003E \u003Cul\u003E\n    \u003Cli\u003E\u003Cb\u003Esolicitation\u003C/b\u003E - The ID of the solicitation being evaluated\u003C/li\u003E\n    \u003Cli\u003E\u003Cb\u003Etimezone\u003C/b\u003E - Timezone for the evaluation in IANA format (e.g., \"Africa/Lagos\")\u003C/li\u003E\n    \u003Cli\u003E\u003Cb\u003Estart_date\u003C/b\u003E - Evaluation start date in ISO 8601 format\u003C/li\u003E\n    \u003Cli\u003E\u003Cb\u003Eend_date\u003C/b\u003E - Evaluation end date in ISO 8601 format\u003C/li\u003E\n    \u003Cli\u003E\u003Cb\u003Egroup\u003C/b\u003E - Array of evaluation groups with their assigned evaluators\u003C/li\u003E\n    \u003Cli\u003E\u003Cb\u003Edocuments\u003C/b\u003E - Array of documents required for the evaluation\u003C/li\u003E\n    \u003Cli\u003E\u003Cb\u003Ecriteria\u003C/b\u003E - Array of evaluation criteria with their configurations\u003C/li\u003E\n\u003C/ul\u003E \u003Cbr\u003E \u003Cb\u003EGroup structure:\u003C/b\u003E Each group should contain a name and an array of evaluator IDs. \u003Cbr\u003E \u003Cb\u003EDocuments structure:\u003C/b\u003E Each document should specify title, type, assigned group, whether it's required, and if multiple uploads are allowed. \u003Cbr\u003E \u003Cb\u003ECriteria structure:\u003C/b\u003E Each criterion should include title, description, type (either \"pass_fail\" or \"weight\"), score (string or number), and assigned group.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "solicitation": {
                    "type": "string"
                  },
                  "timezone": {
                    "type": "string",
                    "description": "Timezone (IANA format)"
                  },
                  "start_date": {
                    "type": "string",
                    "description": "Start date (ISO 8601)"
                  },
                  "end_date": {
                    "type": "string",
                    "description": "End date (ISO 8601)"
                  },
                  "group": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "evaluators": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "documents": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "title": {
                          "type": "string"
                        },
                        "type": {
                          "type": "string"
                        },
                        "group": {
                          "type": "string"
                        },
                        "required": {
                          "type": "boolean"
                        },
                        "multiple": {
                          "type": "boolean"
                        }
                      }
                    }
                  },
                  "criteria": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "title": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "pass_fail",
                            "weight"
                          ]
                        },
                        "score": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "group": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "required": [
                  "solicitation",
                  "timezone",
                  "start_date",
                  "end_date",
                  "group",
                  "documents",
                  "criteria"
                ],
                "example": {
                  "solicitation": "solicitation-id",
                  "timezone": "Africa/Lagos",
                  "start_date": "2024-06-01",
                  "end_date": "2024-06-10T1",
                  "group": [
                    {
                      "name": "Group A",
                      "evaluators": [
                        "evaluator1",
                        "evaluator2"
                      ]
                    }
                  ],
                  "documents": [
                    {
                      "title": "Document 1",
                      "type": "pdf",
                      "group": "Group A",
                      "required": true,
                      "multiple": false
                    }
                  ],
                  "criteria": [
                    {
                      "title": "Criterion 1",
                      "description": "Pass/Fail criterion",
                      "type": "pass_fail",
                      "score": "pass",
                      "group": "Group A"
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Evaluation created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Company not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Duplicate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DuplicateError"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "update existing evaluation",
        "description": "Procurement lead can update evaluation",
        "tags": [
          "Procurement-Evaluation"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Evaluation update payload containing all necessary information to update an existing evaluation process. \u003Cbr\u003E\u003Cbr\u003E \u003Cb\u003ERequired fields:\u003C/b\u003E \u003Cul\u003E\n    \u003Cli\u003E\u003Cb\u003Eid\u003C/b\u003E - The ID of the evaluation to update\u003C/li\u003E\n\u003C/ul\u003E \u003Cbr\u003E \u003Cb\u003EOptional fields:\u003C/b\u003E \u003Cul\u003E\n    \u003Cli\u003E\u003Cb\u003Etimezone\u003C/b\u003E - Timezone for the evaluation in IANA format (e.g., \"Africa/Lagos\")\u003C/li\u003E\n    \u003Cli\u003E\u003Cb\u003Estart_date\u003C/b\u003E - Evaluation start date in ISO 8601 format\u003C/li\u003E\n    \u003Cli\u003E\u003Cb\u003Eend_date\u003C/b\u003E - Evaluation end date in ISO 8601 format\u003C/li\u003E\n    \u003Cli\u003E\u003Cb\u003Ereason\u003C/b\u003E - Reason for update\u003C/li\u003E\n    \u003Cli\u003E\u003Cb\u003Egroup\u003C/b\u003E - Array of evaluation groups with their assigned evaluators\u003C/li\u003E\n    \u003Cli\u003E\u003Cb\u003Edocuments\u003C/b\u003E - Array of documents required for the evaluation\u003C/li\u003E\n    \u003Cli\u003E\u003Cb\u003Ecriteria\u003C/b\u003E - Array of evaluation criteria with their configurations\u003C/li\u003E\n\u003C/ul\u003E \u003Cbr\u003E \u003Cb\u003EGroup structure:\u003C/b\u003E Each group may contain an id, name, and an array of evaluator IDs. \u003Cbr\u003E \u003Cb\u003EDocuments structure:\u003C/b\u003E Each document may specify id, title, type, assigned group, and whether it's required. \u003Cbr\u003E \u003Cb\u003ECriteria structure:\u003C/b\u003E Each criterion may include id, title, description, type (\"pass_fail\" or \"weight\"), score (string or number), and assigned group. \u003Cbr\u003E \u003Cb\u003EScore validation:\u003C/b\u003E If type is \"pass_fail\", score must be a string. If type is \"weight\", score must be a number.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "timezone": {
                    "type": "string",
                    "description": "Timezone (IANA format)"
                  },
                  "start_date": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Start date (ISO 8601)"
                  },
                  "end_date": {
                    "type": "string",
                    "format": "date-time",
                    "description": "End date (ISO 8601)"
                  },
                  "reason": {
                    "type": "string",
                    "description": "Reason for update"
                  },
                  "group": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "evaluators": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "documents": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "title": {
                          "type": "string"
                        },
                        "type": {
                          "type": "string"
                        },
                        "group": {
                          "type": "string"
                        },
                        "required": {
                          "type": "boolean"
                        }
                      }
                    }
                  },
                  "criteria": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "title": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "pass_fail",
                            "weight"
                          ]
                        },
                        "score": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "group": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "required": [
                  "id"
                ],
                "example": {
                  "id": "evaluation-id",
                  "timezone": "Africa/Lagos",
                  "start_date": "2024-06-01T00:00:00Z",
                  "end_date": "2024-06-10T23:59:59Z",
                  "reason": "Update evaluation period",
                  "group": [
                    {
                      "id": "group-id",
                      "name": "Group A",
                      "evaluators": [
                        "evaluator1",
                        "evaluator2"
                      ]
                    }
                  ],
                  "documents": [
                    {
                      "id": "doc-id",
                      "title": "Document 1",
                      "type": "pdf",
                      "group": "Group A",
                      "required": true
                    }
                  ],
                  "criteria": [
                    {
                      "id": "criteria-id",
                      "title": "Criterion 1",
                      "description": "Pass/Fail criterion",
                      "type": "pass_fail",
                      "score": "pass",
                      "group": "Group A"
                    },
                    {
                      "id": "criteria-id-2",
                      "title": "Criterion 2",
                      "description": "Weighted criterion",
                      "type": "weight",
                      "score": 10,
                      "group": "Group A"
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Evaluation updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Company not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Duplicate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DuplicateError"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/evaluations/me": {
      "get": {
        "summary": "View all evaluation list",
        "description": "Query and filter vendors",
        "tags": [
          "Procurement-Evaluation"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string",
              "description": "solicitation name"
            }
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "Draft",
                "Pending",
                "InActive",
                "Completed",
                "Active",
                "Suspended"
              ],
              "description": "status - Draft | Pending | InActive | Completed | Active | Suspended"
            }
          },
          {
            "in": "query",
            "name": "category",
            "schema": {
              "type": "string",
              "description": "category id"
            }
          },
          {
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "description": "date range yyyy-mm-dd-yyyy-mm-dd"
            }
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "description": "list page"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "string",
              "description": "list limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Evaluations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Evaluation"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/evaluations/drafts": {
      "get": {
        "summary": "View drafts evaluations",
        "description": "Evaluations draft associatted to a company",
        "tags": [
          "Procurement-Evaluation"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Vendor",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Vendor"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Company not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "create new evaluation drafts",
        "description": "Procurement lead can create new evaluation drafts",
        "tags": [
          "Procurement-Evaluation"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Evaluation creation payload containing all necessary information to set up a new evaluation drafts. \u003Cbr\u003E\u003Cbr\u003E \u003Cb\u003ERequired fields:\u003C/b\u003E \u003Cul\u003E\n    \u003Cli\u003E\u003Cb\u003Esolicitation\u003C/b\u003E - The ID of the solicitation being evaluated\u003C/li\u003E\n    \u003Cli\u003E\u003Cb\u003Etimezone\u003C/b\u003E - Timezone for the evaluation in IANA format (e.g., \"Africa/Lagos\")\u003C/li\u003E\n    \u003Cli\u003E\u003Cb\u003Estart_date\u003C/b\u003E - Evaluation start date in ISO 8601 format\u003C/li\u003E\n    \u003Cli\u003E\u003Cb\u003Eend_date\u003C/b\u003E - Evaluation end date in ISO 8601 format\u003C/li\u003E\n    \u003Cli\u003Egroup - Array of evaluation groups with their assigned evaluators\u003C/li\u003E\n    \u003Cli\u003Edocuments - Array of documents required for the evaluation\u003C/li\u003E\n    \u003Cli\u003Ecriteria - Array of evaluation criteria with their configurations\u003C/li\u003E\n\u003C/ul\u003E \u003Cbr\u003E \u003Cb\u003EGroup structure:\u003C/b\u003E Each group should contain a name and an array of evaluator IDs. \u003Cbr\u003E \u003Cb\u003EDocuments structure:\u003C/b\u003E Each document should specify title, type, assigned group, whether it's required, and if multiple uploads are allowed. \u003Cbr\u003E \u003Cb\u003ECriteria structure:\u003C/b\u003E Each criterion should include title, description, type (either \"pass_fail\" or \"weight\"), score (string or number), and assigned group.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "solicitation": {
                    "type": "string"
                  },
                  "timezone": {
                    "type": "string",
                    "description": "Timezone (IANA format)"
                  },
                  "start_date": {
                    "type": "string",
                    "description": "Start date (ISO 8601)"
                  },
                  "end_date": {
                    "type": "string",
                    "description": "End date (ISO 8601)"
                  },
                  "group": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "evaluators": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "documents": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "title": {
                          "type": "string"
                        },
                        "type": {
                          "type": "string"
                        },
                        "group": {
                          "type": "string"
                        },
                        "required": {
                          "type": "boolean"
                        },
                        "multiple": {
                          "type": "boolean"
                        }
                      }
                    }
                  },
                  "criteria": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "title": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "pass_fail",
                            "weight"
                          ]
                        },
                        "score": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "group": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "required": [
                  "solicitation",
                  "timezone",
                  "start_date",
                  "end_date",
                  "group",
                  "documents",
                  "criteria"
                ],
                "example": {
                  "solicitation": "solicitation-id",
                  "timezone": "Africa/Lagos",
                  "start_date": "2024-06-01",
                  "end_date": "2024-06-10T1",
                  "group": [
                    {
                      "name": "Group A",
                      "evaluators": [
                        "evaluator1",
                        "evaluator2"
                      ]
                    }
                  ],
                  "documents": [
                    {
                      "title": "Document 1",
                      "type": "pdf",
                      "group": "Group A",
                      "required": true,
                      "multiple": false
                    }
                  ],
                  "criteria": [
                    {
                      "title": "Criterion 1",
                      "description": "Pass/Fail criterion",
                      "type": "pass_fail",
                      "score": "pass",
                      "group": "Group A"
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Evaluation created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Company not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Duplicate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DuplicateError"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/evaluations/solicitations": {
      "get": {
        "summary": "View  available solicitation",
        "description": "Return solicitation that have not been evaluated",
        "tags": [
          "Procurement-Evaluation"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Solicitation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "_id": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/evaluations/solicitations/{search}": {
      "get": {
        "summary": "filter solicitation by id or name",
        "description": "Return solicitation that have not been evaluated",
        "tags": [
          "Procurement-Evaluation"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "Filter solicitations by name/id"
          }
        ],
        "responses": {
          "200": {
            "description": "Solicitation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "_id": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "id": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/evaluations/email/{email}": {
      "get": {
        "summary": "Autocomplete for evaluator email address",
        "description": "Make request at keystrooke interval to return evaluators with similar search",
        "tags": [
          "Procurement-Evaluation"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "email",
            "required": true,
            "schema": {
              "type": "string",
              "description": "email keyword"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "email": {
                            "type": "string"
                          },
                          "id": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/evaluations/evaluators": {
      "get": {
        "summary": "All company evaluators",
        "description": "Return all company evaluators email address",
        "tags": [
          "Procurement-Evaluation"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "email": {
                            "type": "string"
                          },
                          "id": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/evaluations/solicitation/{solicitationId}": {
      "post": {
        "summary": "Check solicitation end date",
        "description": "This api checks if the solicitation is over before evaluation start date",
        "tags": [
          "Procurement-Evaluation"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "solicitationId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "solicitationId"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Evaluation time configuration payload containing time-related settings for the evaluation process. \u003Cbr\u003E\u003Cbr\u003E \u003Cb\u003ERequired fields:\u003C/b\u003E \u003Cul\u003E\n    \u003Cli\u003E\u003Cb\u003Etimezone\u003C/b\u003E - The timezone for the evaluation in IANA format (e.g., \"Africa/Lagos\")\u003C/li\u003E\n    \u003Cli\u003E\u003Cb\u003Estart_date\u003C/b\u003E - Evaluation start date in ISO 8601 format (e.g., \"2024-06-01\")\u003C/li\u003E\n\u003C/ul\u003E \u003Cbr\u003E Note: The timezone determines how all dates and times will be interpreted throughout the evaluation process.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "timezone": {
                    "type": "string"
                  },
                  "start_date": {
                    "type": "string"
                  }
                },
                "required": [
                  "timezone",
                  "start_date"
                ],
                "example": {
                  "timezone": "Africa/Lagos",
                  "start_date": "2024-06-01"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "valid": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Solicitation not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/evaluations/criteria/{criteriaId}": {
      "delete": {
        "summary": "Delete criteria on edit screen",
        "description": "Procurement lead should be promted before deleting all contentn as direclty related to this evaluation criteria",
        "tags": [
          "Procurement-Evaluation"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "criteriaId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "criteriaId"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {
              "application/json": {
                "schema": null
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Criteria group not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/evaluations/document/{documentId}": {
      "delete": {
        "summary": "Delete document on edit screen",
        "description": "Procurement lead should be promted before deleting all contentn as direclty related to this evaluation document",
        "tags": [
          "Procurement-Evaluation"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "documentId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "documentId"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {
              "application/json": {
                "schema": null
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Document group not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/evaluations/evaluation-group/{evaluationGroupId}/status/{status}": {
      "put": {
        "summary": "Update evaluation group status",
        "description": "Update evaluation group",
        "tags": [
          "Procurement-Evaluation"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "evaluationGroupId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "evaluationGroupId"
            }
          },
          {
            "in": "path",
            "name": "status",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "withhold",
                "release"
              ],
              "description": "evaluation group status"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {
              "application/json": {
                "schema": null
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Document group not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/evaluations/proposal/{proposalId}": {
      "get": {
        "summary": "Delete document on edit screen",
        "description": "Procurement lead should be promted before deleting all contentn as direclty related to this evaluation document",
        "tags": [
          "Procurement-Evaluation",
          "Company-Evaluation",
          "Evaluator"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "proposalId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "proposalId"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ProposalPriceAction"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Document group not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/evaluations/{evaluationId}": {
      "get": {
        "summary": "Check Evaluation overview details",
        "description": "This api return evaluation details including criteria and document",
        "tags": [
          "Procurement-Evaluation",
          "Company-Evaluation"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "evaluationId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "evaluationId"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/VendorInSolicitation"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Solicitation not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/evaluations/{evaluationId}/bid-comparison": {
      "get": {
        "summary": "Check Evaluation bid comparison",
        "description": "This api return price actions submitted by the vendor",
        "tags": [
          "Procurement-Evaluation",
          "Company-Evaluation",
          "Evaluator"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "evaluationId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "evaluationId"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/BidComparisonResponse"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Solicitation not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/evaluations/{evaluationId}/groups": {
      "get": {
        "summary": "Check Evaluation groups details",
        "description": "This api return groups details",
        "tags": [
          "Procurement-Evaluation"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "evaluationId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "evaluationId"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/EvaluationGroup"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Evaluation not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/evaluations/{evaluationId}/criteria": {
      "get": {
        "summary": "Check evaluation criteria overview",
        "description": "Evaluation criteria overview",
        "tags": [
          "Procurement-Evaluation"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "evaluationId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "evaluationId"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/EvaluationCriteriaOverview"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Evaluation not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/evaluations/{evaluationId}/evaluators": {
      "get": {
        "summary": "Check Evaluator details",
        "description": "This api return evaluator details",
        "tags": [
          "Procurement-Evaluation"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "evaluationId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "evaluationId"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Evaluator"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Evaluation not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/evaluations/{evaluationId}/manage": {
      "post": {
        "summary": "Add current user as a manager to an evaluation",
        "description": "Allows a procurement user to be added as a manager to an evaluation",
        "tags": [
          "Procurement-Evaluation"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "evaluationId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the evaluation to manage"
          }
        ],
        "responses": {
          "200": {
            "description": "User added as evaluation manager",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Evaluation or User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "User is already a manager",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/evaluations/{evaluationId}/groups/{groupId}": {
      "delete": {
        "summary": "Delete groups on edit screen",
        "description": "Procurement lead should be promted before deleting all contentn as direclty related to this evaluation group",
        "tags": [
          "Procurement-Evaluation"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "evaluationId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "evaluationId"
            }
          },
          {
            "in": "path",
            "name": "groupId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "groupId"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {
              "application/json": {
                "schema": null
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Evaluation/Evaluation group not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/evaluations/{evaluationId}/groups/{groupId}/{evaluatorId}": {
      "delete": {
        "summary": "Remove evaluator from evaluation group on edit screen",
        "description": "Procurement lead can remove evaluator from evaluation group",
        "tags": [
          "Procurement-Evaluation"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "evaluationId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "evaluationId"
            }
          },
          {
            "in": "path",
            "name": "groupId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "groupId"
            }
          },
          {
            "in": "path",
            "name": "evaluatorId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "evaluatorId"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {
              "application/json": {
                "schema": null
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Evaluation/Evaluation group not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/evaluations/{evaluationId}/evaluators/{evaluatorId}/score": {
      "get": {
        "summary": "Evaluators score details",
        "description": "This api return evaluator score details",
        "tags": [
          "Procurement-Evaluation",
          "Procurement-Solicitations"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "evaluationId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "evaluationId"
            }
          },
          {
            "in": "path",
            "name": "evaluationId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "evaluationId"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Evaluator"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Evaluation not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/evaluations/{evaluationId}/bid-comparison/export": {
      "get": {
        "summary": "Export bid comparison",
        "description": "Generates and downloads a PDF or DOCX document showing a comparison of all vendor bids for a specific evaluation. Includes rank, score, total, and submission details.",
        "tags": [
          "Procurement-Evaluation",
          "Company-Evaluation",
          "Evaluator"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "evaluationId",
            "in": "path",
            "description": "The MongoDB ObjectId of the evaluation",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "pdf",
                "docx"
              ],
              "default": "pdf"
            },
            "description": "Export file type (pdf or docx)"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully generated file",
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Invalid evaluation ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Evaluation or related proposals not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/solicitations": {
      "post": {
        "summary": "create new solicitations",
        "description": "Procurement lead can create new solicitaion",
        "tags": [
          "Procurement-Solicitations"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Solicitation creation payload containing all necessary information to create a new procurement solicitation. \u003Cbr\u003E\u003Cbr\u003E \u003Cb\u003ERequired fields:\u003C/b\u003E \u003Cul\u003E\n    \u003Cli\u003E\u003Cb\u003Ename\u003C/b\u003E - Solicitation name (minimum 3 characters)\u003C/li\u003E\n    \u003Cli\u003E\u003Cb\u003EtypeId\u003C/b\u003E - Mongo ObjectId of the solicitation type\u003C/li\u003E\n    \u003Cli\u003E\u003Cb\u003EcategoryIds\u003C/b\u003E - Array of category Mongo ObjectIds (minimum 1 required)\u003C/li\u003E\n    \u003Cli\u003E\u003Cb\u003EsubmissionDeadline\u003C/b\u003E - Deadline for submissions in ISO 8601 format\u003C/li\u003E\n    \u003Cli\u003E\u003Cb\u003EestimatedCost\u003C/b\u003E - Estimated budget for the solicitation \u003C/li\u003E\n    \u003Cli\u003E\u003Cb\u003Edescription\u003C/b\u003E - Solicitation description\u003C/li\u003E\n\u003C/ul\u003E \u003Cbr\u003E \u003Cb\u003EOptional fields:\u003C/b\u003E \u003Cul\u003E\n    \u003Cli\u003E\u003Cb\u003Evisibility\u003C/b\u003E - Controls who can see the solicitation (default: \"invite-only\")\u003C/li\u003E\n    \u003Cli\u003E\u003Cb\u003Estatus\u003C/b\u003E - Current status of the solicitation (default: \"draft\")\u003C/li\u003E\n    \u003Cli\u003E\u003Cb\u003EquestionDeadline\u003C/b\u003E - Deadline for vendor questions (nullable)\u003C/li\u003E\n    \u003Cli\u003E\u003Cb\u003EbidIntentDeadline\u003C/b\u003E - Deadline for bid intent declarations (nullable)\u003C/li\u003E\n    \u003Cli\u003E\u003Cb\u003Etimezone\u003C/b\u003E - Timezone for all dates (default: \"Africa/Lagos\")\u003C/li\u003E\n    \u003Cli\u003E\u003Cb\u003Eevents\u003C/b\u003E - Array of related events (site visits, pre-bid meetings, etc.)\u003C/li\u003E\n    \u003Cli\u003E\u003Cb\u003Efiles\u003C/b\u003E - Array of attached documents (nullable)\u003C/li\u003E\n    \u003Cli\u003E\u003Cb\u003Evendors\u003C/b\u003E - Array of vendor participation ids (nullable)\u003C/li\u003E\n\u003C/ul\u003E \u003Cbr\u003E \u003Cb\u003ENotes:\u003C/b\u003E \u003Cul\u003E\n    \u003Cli\u003EAll date-time fields should be in ISO 8601 format\u003C/li\u003E\n    \u003Cli\u003EVisibility options: \"public\" (visible to all) or \"invite-only\" (default)\u003C/li\u003E\n    \u003Cli\u003EStatus transitions should follow workflow rules\u003C/li\u003E\n    \u003Cli\u003EVendor status can be \"invited\", \"confirmed\", or \"declined\"\u003C/li\u003E\n\u003C/ul\u003E",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 3
                  },
                  "typeId": {
                    "type": "string",
                    "description": "Mongo ObjectId"
                  },
                  "categoryIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "minItems": 1
                  },
                  "estimatedCost": {
                    "type": "number"
                  },
                  "description": {
                    "type": "string"
                  },
                  "visibility": {
                    "type": "string",
                    "enum": [
                      "public",
                      "invite-only"
                    ],
                    "default": "invite-only"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "draft",
                      "active",
                      "closed",
                      "awarded",
                      "evaluating"
                    ],
                    "default": "draft"
                  },
                  "submissionDeadline": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "questionDeadline": {
                    "type": "string",
                    "format": "date-time",
                    "nullable": true
                  },
                  "bidIntentDeadline": {
                    "type": "string",
                    "format": "date-time",
                    "nullable": true
                  },
                  "timezone": {
                    "type": "string",
                    "default": "Africa/Lagos"
                  },
                  "events": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "eventType": {
                          "type": "string"
                        },
                        "eventLocation": {
                          "type": "string"
                        },
                        "eventDate": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "eventDescription": {
                          "type": "string",
                          "nullable": true
                        }
                      }
                    }
                  },
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "url": {
                          "type": "string"
                        },
                        "size": {
                          "type": "string"
                        },
                        "type": {
                          "type": "string"
                        }
                      }
                    },
                    "nullable": true
                  },
                  "vendors": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "invited",
                            "confirmed",
                            "declined"
                          ],
                          "nullable": true
                        }
                      }
                    },
                    "nullable": true
                  }
                },
                "required": [
                  "name",
                  "typeId",
                  "categoryIds",
                  "submissionDeadline"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Vendor created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Company not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "fetch company solicitations",
        "description": "Procurement lead can see  solicitaion",
        "tags": [
          "Procurement-Solicitations"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "description": "Page number for pagination (default is 1)"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "description": "Number of items per page (default is 10)"
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "draft",
                "active",
                "closed",
                "awarded",
                "evaluating"
              ]
            },
            "description": "Filter solicitations by status"
          },
          {
            "in": "query",
            "name": "categoryId",
            "schema": {
              "type": "string"
            },
            "description": "Filter solicitations by category Mongo ObjectId"
          },
          {
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter solicitations by a specific date range seperated by - (ISO 8601 format)"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Solicitation"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Company not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/solicitations/me": {
      "get": {
        "summary": "filter created solicitations",
        "description": "Procurement lead can see solicitaion",
        "tags": [
          "Procurement-Solicitations"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "description": "Page number for pagination (default is 1)"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "description": "Number of items per page (default is 10)"
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "draft",
                "active",
                "closed",
                "awarded",
                "evaluating"
              ]
            },
            "description": "Filter solicitations by status"
          },
          {
            "in": "query",
            "name": "categoryId",
            "schema": {
              "type": "string"
            },
            "description": "Filter solicitations by category Mongo ObjectId"
          },
          {
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter solicitations by a specific date range seperated by - (ISO 8601 format)"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Solicitation"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Company not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/solicitations/dashboard": {
      "get": {
        "summary": "View  solicitation dashboard",
        "description": "Solicitation status summary on card",
        "tags": [
          "Procurement-Solicitations"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Dashboard",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "number"
                        },
                        "Active": {
                          "type": "number"
                        },
                        "awarded": {
                          "type": "number"
                        },
                        "underEvaluating": {
                          "type": "number"
                        },
                        "Pending": {
                          "type": "number"
                        },
                        "closed": {
                          "type": "number"
                        },
                        "Draft": {
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Company not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/solicitations/my-actions": {
      "get": {
        "summary": "Vendor actions",
        "description": "Vendor actions limit to 10 - Action types \"evaluation\", \"update\", \"vendor_accept\", \"vendor_declined\",\"vendor_submitted\",\"scored\", \"awarded\",\"question\", \"response\",\"invite\",\"addendum\",",
        "tags": [
          "Procurement-Solicitations"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/VendorAction"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/solicitations/general-updates": {
      "get": {
        "summary": "General update",
        "description": "Limit updates to ten",
        "tags": [
          "Procurement-Solicitations"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/VendorUpdate"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/solicitations/email/{email}": {
      "get": {
        "summary": "Autocomplete for vendor email address",
        "description": "Make request at keystrooke interval to return vendor with similar search",
        "tags": [
          "Procurement-Solicitations"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "email",
            "required": true,
            "schema": {
              "type": "string",
              "description": "email keyword"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "email": {
                            "type": "string"
                          },
                          "id": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/solicitations/vendors": {
      "get": {
        "summary": "All company vendors email",
        "description": "Return all company vendors email address",
        "tags": [
          "Procurement-Solicitations"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "email": {
                            "type": "string"
                          },
                          "id": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/solicitations/{id}": {
      "get": {
        "summary": "View solicitation details",
        "description": "solicitaion  detail page",
        "tags": [
          "Procurement-Solicitations"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "SolicitationId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SolicitationDetail"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Company not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "update solicitation",
        "description": "update solicitation",
        "tags": [
          "Procurement-Solicitations"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "SolicitationId"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Solicitation creation payload containing all necessary information to create a new procurement solicitation. \u003Cbr\u003E\u003Cbr\u003E \u003Cb\u003EOptional fields:\u003C/b\u003E \u003Cul\u003E\n    \u003Cli\u003E\u003Cb\u003Ename\u003C/b\u003E - Solicitation name (minimum 3 characters)\u003C/li\u003E\n    \u003Cli\u003E\u003Cb\u003EtypeId\u003C/b\u003E - Mongo ObjectId of the solicitation type\u003C/li\u003E\n    \u003Cli\u003E\u003Cb\u003EcategoryIds\u003C/b\u003E - Array of category Mongo ObjectIds (minimum 1 required)\u003C/li\u003E\n    \u003Cli\u003E\u003Cb\u003EsubmissionDeadline\u003C/b\u003E - Deadline for submissions in ISO 8601 format\u003C/li\u003E\n    \u003Cli\u003E\u003Cb\u003EestimatedCost\u003C/b\u003E - Estimated budget for the solicitation \u003C/li\u003E\n    \u003Cli\u003E\u003Cb\u003Edescription\u003C/b\u003E - Solicitation description\u003C/li\u003E\n\u003C/ul\u003E \u003Cbr\u003E \u003Cul\u003E\n    \u003Cli\u003E\u003Cb\u003Evisibility\u003C/b\u003E - Controls who can see the solicitation (default: \"invite-only\")\u003C/li\u003E\n    \u003Cli\u003E\u003Cb\u003Estatus\u003C/b\u003E - Current status of the solicitation (default: \"draft\")\u003C/li\u003E\n    \u003Cli\u003E\u003Cb\u003EquestionDeadline\u003C/b\u003E - Deadline for vendor questions (nullable)\u003C/li\u003E\n    \u003Cli\u003E\u003Cb\u003EbidIntentDeadline\u003C/b\u003E - Deadline for bid intent declarations (nullable)\u003C/li\u003E\n    \u003Cli\u003E\u003Cb\u003Etimezone\u003C/b\u003E - Timezone for all dates (default: \"Africa/Lagos\")\u003C/li\u003E\n    \u003Cli\u003E\u003Cb\u003Eevents\u003C/b\u003E - Array of related events (site visits, pre-bid meetings, etc.)\u003C/li\u003E\n    \u003Cli\u003E\u003Cb\u003Efiles\u003C/b\u003E - Array of attached documents (nullable)\u003C/li\u003E\n    \u003Cli\u003E\u003Cb\u003Evendors\u003C/b\u003E - Array of vendor participation ids (nullable)\u003C/li\u003E\n\u003C/ul\u003E \u003Cbr\u003E \u003Cb\u003ENotes:\u003C/b\u003E \u003Cul\u003E\n    \u003Cli\u003EAll date-time fields should be in ISO 8601 format\u003C/li\u003E\n    \u003Cli\u003EVisibility options: \"public\" (visible to all) or \"invite-only\" (default)\u003C/li\u003E\n    \u003Cli\u003EStatus transitions should follow workflow rules\u003C/li\u003E\n    \u003Cli\u003EVendor status can be \"invited\", \"confirmed\", or \"declined\"\u003C/li\u003E\n\u003C/ul\u003E",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 3
                  },
                  "typeId": {
                    "type": "string",
                    "description": "Mongo ObjectId"
                  },
                  "categoryIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "minItems": 1
                  },
                  "estimatedCost": {
                    "type": "number"
                  },
                  "description": {
                    "type": "string"
                  },
                  "visibility": {
                    "type": "string",
                    "enum": [
                      "public",
                      "invite-only"
                    ],
                    "default": "invite-only"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "draft",
                      "active",
                      "closed",
                      "awarded",
                      "evaluating"
                    ],
                    "default": "draft"
                  },
                  "submissionDeadline": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "questionDeadline": {
                    "type": "string",
                    "format": "date-time",
                    "nullable": true
                  },
                  "bidIntentDeadline": {
                    "type": "string",
                    "format": "date-time",
                    "nullable": true
                  },
                  "timezone": {
                    "type": "string",
                    "default": "Africa/Lagos"
                  },
                  "events": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "eventType": {
                          "type": "string"
                        },
                        "eventLocation": {
                          "type": "string"
                        },
                        "eventDate": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "eventDescription": {
                          "type": "string",
                          "nullable": true
                        }
                      }
                    }
                  },
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "url": {
                          "type": "string"
                        }
                      }
                    },
                    "nullable": true
                  },
                  "vendors": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "invited",
                            "confirmed",
                            "declined"
                          ],
                          "nullable": true
                        }
                      }
                    },
                    "nullable": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Vendor created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Solicitation not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a solicitation",
        "description": "Delete an existing solicitation and its associated records (e.g., addendums, evaluations, logs)",
        "tags": [
          "Procurement-Solicitations"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the solicitation to delete"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Solicitation deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Invalid solicitation ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "404": {
            "description": "Solicitation not found or unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/solicitations/{solicitationId}/evaluators": {
      "get": {
        "summary": "Check Evaluator details",
        "description": "This api return evaluator details",
        "tags": [
          "Procurement-Solicitations"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "solicitationId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "solicitationId"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Evaluator"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Evaluation not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/solicitations/{solicitationId}/manage": {
      "post": {
        "summary": "Add current user as a manager to an solicitation",
        "description": "Allows a procurement user to be added as a manager to an solicitation",
        "tags": [
          "Procurement-Solicitation"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "solicitationId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the  solicitation to manage"
          }
        ],
        "responses": {
          "200": {
            "description": "User added as  sokicitation manager",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Evaluation or User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "User is already a manager",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/solicitations/{solicitationId}/vendors": {
      "get": {
        "summary": "Check Vendor in solicitation",
        "description": "This api return vendor details in solicitation",
        "tags": [
          "Procurement-Solicitations"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "solicitationId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "solicitationId"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string",
              "description": "filter by vendor name"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/VendorInSolicitation"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Evaluation not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/solicitations/{solicitationId}/evaluator/{evaluatorId}": {
      "delete": {
        "summary": "Remove evaluator from evaluation",
        "description": "Remove Evaluator",
        "tags": [
          "Procurement-Solicitations",
          "Company-Solicitation"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "solicitationId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "solicitationId"
            }
          },
          {
            "in": "path",
            "name": "evaluatorId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "evaluatorId"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "204": {
            "content": {
              "application/json": {
                "schema": null
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Vendnor / Soliciation not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/solicitations/{solicitationId}/award-vendor/{vendorId}": {
      "put": {
        "summary": "award vendor",
        "description": "Award vendor",
        "tags": [
          "Procurement-Solicitations"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "solicitationId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "solicitationId"
            }
          },
          {
            "in": "path",
            "name": "vendorId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "vendorId"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Evaluation not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/solicitations/{solicitationId}/vendor-proposal/{vendorId}": {
      "get": {
        "summary": "View proposal including vendor info",
        "description": "Proposal submitted detail in detailed view",
        "tags": [
          "Procurement-Solicitations",
          "Company-Solicitation"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "solicitationId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "solicitationId"
            }
          },
          {
            "in": "path",
            "name": "vendorId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "vendorId"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/ViewVendorProposalResponse"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Vendnor / Soliciation not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/solicitations/{solicitationId}/evaluator-score": {
      "get": {
        "summary": "View evaluators score detail",
        "description": "Evaluator score",
        "tags": [
          "Procurement-Solicitations",
          "Company-Solicitation"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "solicitationId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "solicitationId"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/ViewEvaluatorScore"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Vendnor / Soliciation not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/solicitations/{solicitationId}/remind-evaluator/{evaluatorId}": {
      "put": {
        "summary": "Remind evalutor to score",
        "description": "Send email to evaluator",
        "tags": [
          "Procurement-Solicitations"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "solicitationId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "solicitationId"
            }
          },
          {
            "in": "path",
            "name": "evaluatorId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "evaluatorId"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Vendnor / Soliciation not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/solicitations/{solicitationId}/evaluator-score-card/{evaluatorId}": {
      "get": {
        "summary": "View Evaluator score details",
        "description": "Evaluator score details",
        "tags": [
          "Procurement-Solicitations",
          "Company-Solicitation",
          "Procurement-Evaluation"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "solicitationId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "solicitationId"
            }
          },
          {
            "in": "path",
            "name": "evaluatorId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "evaluatorId"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/EvaluationScoreCardResponse"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Vendnor / Soliciation not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/solicitations/{solicitationId}/questions": {
      "get": {
        "summary": "Solicitation questions",
        "description": "Questiona and answers",
        "tags": [
          "Procurement-Solicitations"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "solicitationId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "solicitationId"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "totalAnswer": {
                          "type": "number"
                        },
                        "questionCount": {
                          "type": "number"
                        },
                        "question": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/SolicitaionQuestion"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Solicitation not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Ask Solicitation questions",
        "description": "Ask Question",
        "tags": [
          "Procurement-Solicitations"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "solicitationId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "solicitationId"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "\u003Cb\u003Enote\u003C/b\u003E\u003Cbr\u003EQuestion\u003C/br\u003E",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": null,
                "example": {
                  "note": "Please clarify"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "propertes": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Solicitation not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/solicitations/{solicitationId}/questions/{questionId}": {
      "post": {
        "summary": "Reply to Solicitation questions",
        "description": "Answer",
        "tags": [
          "Procurement-Solicitations"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "solicitationId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "solicitationId"
            }
          },
          {
            "in": "path",
            "name": "questionId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "questionId"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "\u003Cb\u003Enote\u003C/b\u003E\u003Cbr\u003EQuestion\u003C/br\u003E",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": null,
                "example": {
                  "note": "Clarification"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "propertes": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Solicitation not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/solicitations/{solicitationId}/addendums": {
      "get": {
        "summary": "View addendum",
        "description": "View addendums for a procurement solicitation",
        "tags": [
          "Procurement-Solicitations",
          "Vendor-Solicitation"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "solicitationId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the solicitation to add the addendum to"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SolicitationAddendum"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Solicitation not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create new addendum",
        "description": "Create a new addendum for a procurement solicitation",
        "tags": [
          "Procurement-Solicitations"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "solicitationId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the solicitation to add the addendum to"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Addendum creation data.\n\nRequirements:\n- Title is required\n- Submission and question deadlines must be valid ISO 8601 datetime strings\n- Description is required\n- Files array must contain valid file objects\n- Status drafft | publish\n\nOptional:\n- Timezone is optional\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "Title of the addendum",
                    "example": "Addendum #1 - Updated Specifications",
                    "minLength": 5,
                    "maxLength": 200
                  },
                  "description": {
                    "type": "string",
                    "description": "Optional detailed description of the addendum",
                    "example": "This addendum updates section 3.2 of the technical specifications",
                    "maxLength": 2000
                  },
                  "submissionDeadline": {
                    "type": "string",
                    "format": "date-time",
                    "description": "New deadline for submission after addendum",
                    "example": "2024-12-31T23:59:59Z"
                  },
                  "questionDeadline": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Deadline for questions related to this addendum",
                    "example": "2024-12-15T23:59:59Z"
                  },
                  "question": {
                    "type": "string",
                    "description": "Questions or clarification provided in this addendum",
                    "example": "Clarification on minimum technical requirements",
                    "minLength": 10
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "draft",
                      "publish"
                    ],
                    "description": "Publication status of the addendum (defaults to draft if not provided)",
                    "example": "publish"
                  },
                  "timezone": {
                    "type": "string",
                    "description": "Timezone of the addendum",
                    "example": "America/Toronto"
                  },
                  "files": {
                    "type": "array",
                    "description": "Attached files for the addendum",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Original file name",
                          "example": "technical_specs.pdf"
                        },
                        "url": {
                          "type": "string",
                          "format": "uri",
                          "description": "URL to access the file",
                          "example": "https://storage.example.com/files/specs.pdf"
                        },
                        "size": {
                          "type": "string",
                          "description": "File size in bytes",
                          "example": "1024000"
                        },
                        "type": {
                          "type": "string",
                          "description": "MIME type of the file",
                          "example": "application/pdf"
                        }
                      }
                    },
                    "minItems": 0,
                    "maxItems": 10
                  }
                },
                "required": [
                  "title",
                  "submissionDeadline",
                  "questionDeadline",
                  "question",
                  "files"
                ],
                "example": {
                  "title": "Addendum #1 - Updated Requirements",
                  "description": "Updated technical requirements for Section 4.5",
                  "submissionDeadline": "2024-12-31T23:59:59Z",
                  "questionDeadline": "2024-12-15T23:59:59Z",
                  "question": "questionId",
                  "status": "publish",
                  "files": [
                    {
                      "name": "updated_specs.pdf",
                      "url": "https://storage.example.com/files/updated_specs.pdf",
                      "size": "2048000",
                      "type": "application/pdf"
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Addendum created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Addendum created successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Solicitation not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Duplicate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DuplicateError"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/solicitations/{solicitationId}/addendums/{questionId}": {
      "post": {
        "summary": "Reply addendum to a question",
        "description": "Create a new addendum for a question",
        "tags": [
          "Procurement-Solicitations"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "solicitationId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the solicitation to add the addendum to"
            }
          },
          {
            "in": "path",
            "name": "questionId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the question to add the addendum to"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Addendum creation data.\n\nRequirements:\n- Title is required\n- Submission and question deadlines must be valid ISO 8601 datetime strings\n- Description is required\n- Files array must contain valid file objects\n- Status drafft | publish\n\nOptional:\n- Timezone is optional\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "Title of the addendum",
                    "example": "Addendum #1 - Updated Specifications",
                    "minLength": 5,
                    "maxLength": 200
                  },
                  "description": {
                    "type": "string",
                    "description": "Optional detailed description of the addendum",
                    "example": "This addendum updates section 3.2 of the technical specifications",
                    "maxLength": 2000
                  },
                  "submissionDeadline": {
                    "type": "string",
                    "format": "date-time",
                    "description": "New deadline for submission after addendum",
                    "example": "2024-12-31T23:59:59Z"
                  },
                  "questionDeadline": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Deadline for questions related to this addendum",
                    "example": "2024-12-15T23:59:59Z"
                  },
                  "question": {
                    "type": "string",
                    "description": "Questions or clarification provided in this addendum",
                    "example": "Clarification on minimum technical requirements",
                    "minLength": 10
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "draft",
                      "publish"
                    ],
                    "description": "Publication status of the addendum (defaults to draft if not provided)",
                    "example": "publish"
                  },
                  "timezone": {
                    "type": "string",
                    "description": "Timezone of the addendum",
                    "example": "America/Toronto"
                  },
                  "files": {
                    "type": "array",
                    "description": "Attached files for the addendum",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Original file name",
                          "example": "technical_specs.pdf"
                        },
                        "url": {
                          "type": "string",
                          "format": "uri",
                          "description": "URL to access the file",
                          "example": "https://storage.example.com/files/specs.pdf"
                        },
                        "size": {
                          "type": "string",
                          "description": "File size in bytes",
                          "example": "1024000"
                        },
                        "type": {
                          "type": "string",
                          "description": "MIME type of the file",
                          "example": "application/pdf"
                        }
                      }
                    },
                    "minItems": 0,
                    "maxItems": 10
                  }
                },
                "required": [
                  "title",
                  "submissionDeadline",
                  "questionDeadline",
                  "question",
                  "files"
                ],
                "example": {
                  "title": "Addendum #1 - Updated Requirements",
                  "description": "Updated technical requirements for Section 4.5",
                  "submissionDeadline": "2024-12-31T23:59:59Z",
                  "questionDeadline": "2024-12-15T23:59:59Z",
                  "question": "questionId",
                  "status": "publish",
                  "files": [
                    {
                      "name": "updated_specs.pdf",
                      "url": "https://storage.example.com/files/updated_specs.pdf",
                      "size": "2048000",
                      "type": "application/pdf"
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Addendum created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Addendum created successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Solicitation not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Duplicate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DuplicateError"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/solicitations/{solicitationId}/addendums/{addendumId}": {
      "get": {
        "summary": "View addendum details",
        "description": "View addendums details for a procurement solicitation",
        "tags": [
          "Procurement-Solicitations",
          "Vendor-Solicitation"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "solicitationId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the solicitation to add the addendum to"
            }
          },
          {
            "in": "path",
            "name": "addendumId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the addendum"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/SolicitationAddendumDetails"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Solicitation not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update addendum",
        "description": "Update existing  addendum",
        "tags": [
          "Procurement-Solicitations"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "solicitationId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the solicitation to add the addendum to"
            }
          },
          {
            "in": "path",
            "name": "addendumId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the addendum"
            }
          }
        ],
        "requestBody": {
          "description": "Addendum updating data.\n\nOptional:\n- Title\n- Submission and question deadlines must be valid ISO 8601 datetime strings\n- Description\n- Files array must contain valid file objects\n- Status Draft | publish\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "Title of the addendum",
                    "example": "Addendum #1 - Updated Specifications",
                    "minLength": 5,
                    "maxLength": 200
                  },
                  "description": {
                    "type": "string",
                    "description": "Optional detailed description of the addendum",
                    "example": "This addendum updates section 3.2 of the technical specifications",
                    "maxLength": 2000
                  },
                  "submissionDeadline": {
                    "type": "string",
                    "format": "date-time",
                    "description": "New deadline for submission after addendum",
                    "example": "2024-12-31T23:59:59Z"
                  },
                  "questionDeadline": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Deadline for questions related to this addendum",
                    "example": "2024-12-15T23:59:59Z"
                  },
                  "question": {
                    "type": "string",
                    "description": "Questions or clarification provided in this addendum",
                    "example": "Clarification on minimum technical requirements",
                    "minLength": 10
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "draft",
                      "publish"
                    ],
                    "description": "Publication status of the addendum (defaults to draft if not provided)",
                    "example": "publish"
                  },
                  "files": {
                    "type": "array",
                    "description": "Attached files for the addendum",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Original file name",
                          "example": "technical_specs.pdf"
                        },
                        "url": {
                          "type": "string",
                          "format": "uri",
                          "description": "URL to access the file",
                          "example": "https://storage.example.com/files/specs.pdf"
                        },
                        "size": {
                          "type": "string",
                          "description": "File size in bytes",
                          "example": "1024000"
                        },
                        "type": {
                          "type": "string",
                          "description": "MIME type of the file",
                          "example": "application/pdf"
                        }
                      }
                    },
                    "minItems": 0,
                    "maxItems": 10
                  }
                },
                "required": [
                  "title",
                  "submissionDeadline",
                  "questionDeadline",
                  "question",
                  "files"
                ],
                "example": {
                  "title": "Addendum #1 - Updated Requirements",
                  "description": "Updated technical requirements for Section 4.5",
                  "submissionDeadline": "2024-12-31T23:59:59Z",
                  "questionDeadline": "2024-12-15T23:59:59Z",
                  "question": "questionId",
                  "status": "publish",
                  "files": [
                    {
                      "name": "updated_specs.pdf",
                      "url": "https://storage.example.com/files/updated_specs.pdf",
                      "size": "2048000",
                      "type": "application/pdf"
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Addendum not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Duplicate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DuplicateError"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete addendum",
        "description": "Delete existing  addendum",
        "tags": [
          "Procurement-Solicitations"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "solicitationId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the solicitation to"
            }
          },
          {
            "in": "path",
            "name": "addendumId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the addendum"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": null
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Addendum not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/solicitations/meta/types": {
      "get": {
        "summary": "View  solicitation types",
        "description": "Solicitation types",
        "tags": [
          "Procurement-Solicitations"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Solicitation types",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create solicitation type",
        "description": "Create a new solicitation type",
        "tags": [
          "ProcurementLead",
          "Admin",
          "SuperAdmin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Request payload for updating basic entity information. \u003Cbr\u003E\u003Cbr\u003E \u003Cb\u003ERequired fields:\u003C/b\u003E \u003Cul\u003E\n    \u003Cli\u003E\u003Cb\u003Ename\u003C/b\u003E - The new name for the entity (string)\u003C/li\u003E\n\u003C/ul\u003E \u003Cbr\u003E \u003Cb\u003EOptional fields:\u003C/b\u003E \u003Cul\u003E\n    \u003Cli\u003E\u003Cb\u003Edescription\u003C/b\u003E - Updated description of the entity (nullable string)\u003C/li\u003E\n\u003C/ul\u003E \u003Cbr\u003E \u003Cb\u003ENotes:\u003C/b\u003E \u003Cul\u003E\n    \u003Cli\u003EAt least one field (name or description) must be provided\u003C/li\u003E\n    \u003Cli\u003ETo clear an existing description, set it to null\u003C/li\u003E\n    \u003Cli\u003EName cannot be empty or null\u003C/li\u003E\n\u003C/ul\u003E",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string",
                    "nullable": true
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Solicitation type created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string",
                          "nullable": true
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/solicitations/meta/types/{id}": {
      "put": {
        "summary": "Update solicitation type",
        "description": "Update a new solicitation type",
        "tags": [
          "ProcurementLead",
          "Admin",
          "SuperAdmin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "SolicitationId"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Request payload for updating basic entity information. \u003Cbr\u003E\u003Cbr\u003E \u003Cb\u003ERequired fields:\u003C/b\u003E \u003Cul\u003E\n    \u003Cli\u003E\u003Cb\u003Ename\u003C/b\u003E - The new name for the entity (string)\u003C/li\u003E\n\u003C/ul\u003E \u003Cbr\u003E \u003Cb\u003EOptional fields:\u003C/b\u003E \u003Cul\u003E\n    \u003Cli\u003E\u003Cb\u003Edescription\u003C/b\u003E - Updated description of the entity (nullable string)\u003C/li\u003E\n\u003C/ul\u003E \u003Cbr\u003E \u003Cb\u003ENotes:\u003C/b\u003E \u003Cul\u003E\n    \u003Cli\u003EAt least one field (name or description) must be provided\u003C/li\u003E\n    \u003Cli\u003ETo clear an existing description, set it to null\u003C/li\u003E\n    \u003Cli\u003EName cannot be empty or null\u003C/li\u003E\n\u003C/ul\u003E",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string",
                    "nullable": true
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Solicitation type created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string",
                          "nullable": true
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/solicitations/meta/categories": {
      "get": {
        "summary": "View  solicitation categories",
        "description": "Solicitation categories",
        "tags": [
          "Procurement-Solicitations",
          "Procurement-Vendor"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Solicitation categories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/solicitations/analytics/status": {
      "get": {
        "summary": "Get solicitation status breakdown",
        "description": "Returns counts of solicitations by status for the current user's company within a specified time range",
        "tags": [
          "Procurement-Solicitations",
          "CompanyAdmin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "range",
            "required": false,
            "schema": {
              "type": "string",
              "default": "12months",
              "description": "Time range (e.g., 24hours, 7days, 52weeks, 12months, or all)"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Solicitation status breakdown",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Solicitation status breakdown"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "integer",
                          "description": "Total number of solicitations",
                          "example": 25
                        },
                        "awarded": {
                          "type": "integer",
                          "description": "Number of awarded solicitations",
                          "example": 5
                        },
                        "active": {
                          "type": "integer",
                          "description": "Number of active solicitations",
                          "example": 8
                        },
                        "evaluating": {
                          "type": "integer",
                          "description": "Number of solicitations under evaluation",
                          "example": 7
                        },
                        "closed": {
                          "type": "integer",
                          "description": "Number of closed solicitations",
                          "example": 5
                        },
                        "draft": {
                          "type": "integer",
                          "description": "Number of draft solicitations",
                          "example": 1
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid range parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/solicitations/analytics/bid-intent": {
      "get": {
        "summary": "Get vendor bid intent status breakdown",
        "description": "Returns counts of vendor bid intent statuses (invited, confirmed, declined) within a specified time range",
        "tags": [
          "Procurement-Solicitations",
          "CompanyAdmin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "range",
            "required": false,
            "schema": {
              "type": "string",
              "default": "12months",
              "description": "Time range (e.g., 24hours, 7days, 52weeks, 12months)"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Vendor bid intent status breakdown",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Vendor bid intent status"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "invited": {
                          "type": "integer",
                          "description": "Number of invited vendors",
                          "example": 50
                        },
                        "confirmed": {
                          "type": "integer",
                          "description": "Number of confirmed vendors",
                          "example": 20
                        },
                        "declined": {
                          "type": "integer",
                          "description": "Number of declined vendors",
                          "example": 10
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid range parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/solicitations/analytics/activities": {
      "get": {
        "summary": "Get solicitation activities over time",
        "description": "Returns time-series data of solicitation creation activities within a specified time range",
        "tags": [
          "Procurement-Solicitations"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "range",
            "required": false,
            "schema": {
              "type": "string",
              "default": "12months",
              "description": "Time range (e.g., 24hours, 7days, 52weeks, 12months)"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Solicitation activities time-series data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Solicitation activities"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "solicitations": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "label": {
                                "type": "string",
                                "description": "Time label (e.g., \"Jan\", \"Mon\", \"Week 1\", \"14:00\")",
                                "example": "Jan"
                              },
                              "value": {
                                "type": "integer",
                                "description": "Number of solicitations created in the time period",
                                "example": 5
                              }
                            }
                          }
                        },
                        "evaluations": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "label": {
                                "type": "string",
                                "description": "Time label (e.g., \"Jan\", \"Mon\", \"Week 1\", \"14:00\")",
                                "example": "Jan"
                              },
                              "value": {
                                "type": "integer",
                                "description": "Number of solicitations created in the time period",
                                "example": 5
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid range parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/solicitations/analytics/total-evaluations": {
      "get": {
        "summary": "Get Total evaluation",
        "description": "Returns time-series data of total evaluations",
        "tags": [
          "Procurement-Solicitations"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "range",
            "required": false,
            "schema": {
              "type": "string",
              "default": "12months",
              "description": "Time range (e.g., 24hours, 7days, 52weeks, 12months)"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Solicitation activities time-series data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Solicitation activities"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TotalEvaluation"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid range parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/solicitations/analytics/vendors-distribution": {
      "get": {
        "summary": "Get vendor distribution",
        "description": "Returns counts of vendor distribution",
        "tags": [
          "Procurement-Solicitations",
          "CompanyAdmin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "range",
            "required": false,
            "schema": {
              "type": "string",
              "default": "12months",
              "description": "Time range (e.g., 24hours, 7days, 52weeks, 12months)"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Vendor bid intent status"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "pending": {
                          "type": "integer",
                          "description": "Number of invited vendors",
                          "example": 50
                        },
                        "inactive": {
                          "type": "integer",
                          "description": "Number of confirmed vendors",
                          "example": 20
                        },
                        "active": {
                          "type": "integer",
                          "description": "Number of declined vendors",
                          "example": 10
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid range parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/solicitations/analytics/proposal-submission": {
      "get": {
        "summary": "Get proposal submission",
        "description": "Returns time-series data of solicitation creation activities within a specified time range",
        "tags": [
          "Procurement-Solicitations",
          "CompanyAdmin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "range",
            "required": false,
            "schema": {
              "type": "string",
              "default": "12months",
              "description": "Time range (e.g., 24hours, 7days, 52weeks, 12months)"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Solicitation activities time-series data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Solicitation activities"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ProposalSubmission"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid range parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/solicitations/{id}/export": {
      "get": {
        "summary": "Export a solicitation as PDF or DOCX",
        "description": "Exports a specific solicitation as a PDF or DOCX document based on the provided solicitation ID. The document includes basic information, details, dates, contact information, pre-bidding events, categories, documents, addenda, and selected suppliers.",
        "tags": [
          "Procurement-Solicitations"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The MongoDB ObjectId of the solicitation to export"
          },
          {
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "pdf",
                "docx"
              ],
              "default": "pdf"
            },
            "description": "Export file type (pdf or docx)"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Invalid solicitation ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Solicitation not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/solicitations/addendums/{id}/export": {
      "get": {
        "summary": "Export a solicitation addendum as PDF or DOCX",
        "description": "Exports a specific solicitation addendum as a PDF or DOCX document based on the provided addendum ID. The document includes basic information, details, dates, contact information, pre-bidding events, and documents.",
        "tags": [
          "Procurement-Solicitations"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The MongoDB ObjectId of the solicitation addendum to export"
          },
          {
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "pdf",
                "docx"
              ],
              "default": "pdf"
            },
            "description": "Export file type (pdf or docx)"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Invalid solicitation addendum ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Solicitation addendum not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/solicitations/{solicitationId}/evaluator-score-card/{evaluatorId}/export": {
      "get": {
        "summary": "Export an evaluation scorecard as PDF or DOCX",
        "description": "Exports a specific evaluator's scorecard as a PDF or DOCX document based on the provided solicitation ID and evaluator ID. The document includes evaluator details, criteria breakdown, and summary comments.",
        "tags": [
          "Procurement-Solicitations",
          "Company-Solicitation",
          "Procurement-Evaluation"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "solicitationId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The MongoDB ObjectId of the solicitation"
          },
          {
            "in": "path",
            "name": "evaluatorId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The MongoDB ObjectId of the evaluator"
          },
          {
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "pdf",
                "docx"
              ],
              "default": "pdf"
            },
            "description": "Export file type (pdf or docx)"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Invalid solicitation or evaluator ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Evaluation or evaluator not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/solicitations/{solicitationId}/vendor-proposal/{vendorId}/export": {
      "get": {
        "summary": "Export a vendor proposal as PDF or DOCX",
        "description": "Generates and downloads a PDF or DOCX document containing the vendor proposal details, evaluation summary, criteria breakdown, submitted documents, and evaluator scores for a specific solicitation and vendor.",
        "tags": [
          "Procurement-Solicitations",
          "Company-Solicitation"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "solicitationId",
            "in": "path",
            "description": "The MongoDB ObjectId of the solicitation",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vendorId",
            "in": "path",
            "description": "The MongoDB ObjectId of the vendor",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "pdf",
                "docx"
              ],
              "default": "pdf"
            },
            "description": "Export file type (pdf or docx)"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully generated file",
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Invalid solicitation or vendor ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Solicitation or vendor proposal not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/vendors": {
      "get": {
        "summary": "View vendors list",
        "description": "Query and filter vendors",
        "tags": [
          "Procurement-Vendor",
          "CompanyAdmin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string",
              "description": "vendor name"
            }
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "description": "status"
            }
          },
          {
            "in": "query",
            "name": "category",
            "schema": {
              "type": "string",
              "description": "category id"
            }
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "description": "list page"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "string",
              "description": "list limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Vendor",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Vendor"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Company not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "create new vendor",
        "description": "Procurement lead can create new vendor",
        "tags": [
          "Procurement-Vendor",
          "CompanyAdmin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "description": "\u003Cb\u003Ename\u003C/b\u003E\u003Cbr\u003EVendor name\u003C/br\u003E \u003Cb\u003EcategoryId\u003C/b\u003E\u003Cbr\u003EcategoryId\u003C/br\u003E \u003Cb\u003EsecondaryEmails\u003C/b\u003E\u003Cbr\u003EVendor secondary email - array\u003C/br\u003E \u003Cb\u003EprimaryEmail\u003C/b\u003E\u003Cbr\u003EVendor email\u003C/br\u003E \u003CvendorId\u003C/b\u003E - Vendor id",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": null,
                "example": {
                  "name": "Titan",
                  "categoryId": "CategoryId",
                  "secondaryEmails": [
                    "email1"
                  ],
                  "primaryEmail": "vendor@aigpro.com",
                  "vendorId": "vend123"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Vendor created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Vendor"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Company not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Duplicate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DuplicateError"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/vendors/dashboard": {
      "get": {
        "summary": "vendor dashboard",
        "description": "Get vendor activity",
        "tags": [
          "Procurement-Vendor",
          "CompanyAdmin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Vendor dashboard",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "allVendor": {
                          "type": "number"
                        },
                        "inActiveVendor": {
                          "type": "number"
                        },
                        "suspendedVendor": {
                          "type": "number"
                        },
                        "activeVendor": {
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/vendors/category": {
      "get": {
        "summary": "View category",
        "description": "All categry",
        "tags": [
          "Procurement-Vendor",
          "Procurement-Solicitations"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Vendor",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Category"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "create new category",
        "description": "Procurement lead can create new category",
        "tags": [
          "Procurement-Vendor",
          "Procurement-Solicitations"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "description": "\u003Cb\u003Ename\u003C/b\u003E\u003Cbr\u003EVendor name\u003C/br\u003E",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": null,
                "example": {
                  "name": "Titan"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Category"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Company not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Duplicate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DuplicateError"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/vendors/creat-many": {
      "post": {
        "summary": "Upload spreadsheet",
        "description": "View preview of upload before creating",
        "tags": [
          "Procurement-Vendor",
          "CompanyAdmin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "description": "\u003Cb\u003Edoc\u003C/b\u003E\u003Cbr\u003EUpload spreadsheet\u003C/br\u003E",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "doc": {
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": [
                  "doc"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Vendor created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Vendor"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Company not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Duplicate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DuplicateError"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/vendors/{vendorId}/suspend": {
      "delete": {
        "summary": "Suspend vendor",
        "description": "Prcurement lead can suspend vendor",
        "tags": [
          "Procurement-Vendor",
          "CompanyAdmin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "vendorId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "vendor id"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {
              "application/json": {
                "schema": null
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Vendor not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/vendors/{vendorId}": {
      "get": {
        "summary": "View vendor details",
        "description": "Vendor details",
        "tags": [
          "Procurement-Vendor",
          "CompanyAdmin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "vendorId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "vendor id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Vendor",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "vendor": {
                          "$ref": "#/components/schemas/VendorDetails"
                        },
                        "submissions": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Document"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Vendor not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update vendor details",
        "description": "Procurement lead cann update vendor information on request",
        "tags": [
          "Procurement-Vendor",
          "CompanyAdmin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "vendorId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "vendor id"
            }
          }
        ],
        "requestBody": {
          "description": "\u003Cb\u003Ewebsite\u003C/b\u003E\u003Cbr\u003EVendor website\u003C/br\u003E \u003Cb\u003Elocation\u003C/b\u003E\u003Cbr\u003EVendor location\u003C/br\u003E \u003Cb\u003Ename\u003C/b\u003E\u003Cbr\u003EVendor name\u003C/br\u003E \u003Cb\u003EcategoryId\u003C/b\u003E\u003Cbr\u003EcategoryId\u003C/br\u003E \u003Cb\u003EsecondaryEmails\u003C/b\u003E\u003Cbr\u003EVendor secondary email - array\u003C/br\u003E \u003Cb\u003Ephone\u003C/b\u003E\u003Cbr\u003EVendor phone\u003C/br\u003E \u003Cb\u003EbusinessType\u003C/b\u003E\u003Cbr\u003EVendor business type\u003C/br\u003E",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": null,
                "example": {
                  "website": "google.com",
                  "location": "Ontario",
                  "name": "Titan",
                  "categoryId": "CategoryId",
                  "secondaryEmails": [
                    "email1"
                  ],
                  "phone": "+2341170223",
                  "businessType": "IT"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Vendor updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Vendor"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Vendor not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/vendors/{vendorId}/unsuspend": {
      "put": {
        "summary": "Unsuspend vendor",
        "description": "Prcurement lead can unsuspend vendor",
        "tags": [
          "Procurement-Vendor",
          "CompanyAdmin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "vendorId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "vendor id"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Vendor not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/procurement/vendors/{id}/export": {
      "get": {
        "summary": "Export a vendor as PDF or DOCX",
        "description": "Exports a specific vendor as a PDF or DOCX document based on the provided vendor ID. The document includes basic information, contact details, category, documents, and submissions.",
        "tags": [
          "Procurement-Vendors"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The MongoDB ObjectId of the vendor to export"
          },
          {
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "pdf",
                "docx"
              ],
              "default": "pdf"
            },
            "description": "Export file type (pdf or docx)"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Invalid vendor ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Vendor not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions": {
      "get": {
        "summary": "Retrieve a list of subscriptions",
        "description": "Fetches a paginated list of subscriptions with optional filters.",
        "tags": [
          "SuperAdmin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "description": "Page number"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10,
              "description": "Items per page"
            }
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string",
              "description": "Search term for company or plan name"
            }
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "expired",
                "suspended"
              ],
              "description": "Filter by subscription status"
            }
          },
          {
            "in": "query",
            "name": "expiryDate",
            "schema": {
              "type": "string",
              "description": "Filter by expiry date range (format: from-to or from or to)\n"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with subscription list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "integer"
                        },
                        "page": {
                          "type": "integer"
                        },
                        "limit": {
                          "type": "integer"
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Subscription"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/plans": {
      "post": {
        "summary": "Create a new plan",
        "description": "Creates a new subscription plan.",
        "tags": [
          "SuperAdmin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "description": "- **name** - Plan name\n- **price** - Plan price (non-negative)\n- **maxUsers** - Maximum number of users (minimum 1)\n- **features** - Array of plan features (optional)\n- **timezone** - timezone of plan (optional)\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1
                  },
                  "price": {
                    "type": "number",
                    "minimum": 0
                  },
                  "maxUsers": {
                    "type": "integer",
                    "minimum": 1
                  },
                  "timezone": {
                    "type": "string",
                    "example": "America/Toronto"
                  },
                  "features": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "name",
                  "price",
                  "maxUsers",
                  "features"
                ]
              },
              "example": {
                "name": "Basic",
                "price": 20,
                "maxUsers": 5,
                "features": [
                  "Support",
                  "Analytics"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Plan created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Plan"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Retrieve a list of plans",
        "description": "Fetches all available subscription plans.",
        "tags": [
          "SuperAdmin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with plan list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Plan"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/logs": {
      "get": {
        "summary": "Retrieve subscription logs",
        "description": "Fetches all  subscription logs. Avaiable action \"plan_upgraded\",\"plan_downgraded\",\"plan_suspended\",\"plan_reactivated\", \"user_limit_changed\",\"plan_expired\", \"new_subscription\",lan_renewed\",",
        "tags": [
          "SuperAdmin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with plan list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SubscriptionLogs"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{id}": {
      "get": {
        "summary": "Retrieve a specific subscription",
        "description": "Fetches details of a single subscription by ID.",
        "tags": [
          "SuperAdmin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Subscription ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with subscription details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Subscription"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Subscription not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{id}/renew": {
      "post": {
        "summary": "Renew a subscription",
        "description": "Extends the expiry date of a subscription and sets status to active.",
        "tags": [
          "SuperAdmin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Subscription ID"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "**durationInDays** - Number of days to extend the subscription (minimum 30)\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "durationInDays": {
                    "type": "integer",
                    "minimum": 30
                  }
                },
                "required": [
                  "durationInDays"
                ]
              },
              "example": {
                "durationInDays": 30
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Subscription renewed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Subscription"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Subscription not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{id}/status": {
      "post": {
        "summary": "Activate/deactivate company subscription",
        "description": "Activates or deactivates a company subscription.",
        "tags": [
          "SuperAdmin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Subscription ID"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "**status** - active | expired | suspended\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "integer",
                    "minimum": 30
                  }
                },
                "required": [
                  "status"
                ]
              },
              "example": {
                "status": 30
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Subscription"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Subscription not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{id}/plan": {
      "put": {
        "summary": "Change the plan of a subscription",
        "description": "Updates the plan of a subscription to a new plan ID.",
        "tags": [
          "SuperAdmin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Subscription ID"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "- **newPlanId** - ID of the new plan\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "newPlanId": {
                    "type": "string"
                  }
                },
                "required": [
                  "newPlanId"
                ]
              },
              "example": {
                "newPlanId": "550e8400-e29b-41d4-a716-446655440000"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Subscription plan changed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Subscription"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Subscription not found or new plan not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/analytics/status": {
      "get": {
        "summary": "Get subscription status statistics",
        "description": "Retrieves statistics of subscription statuses within a date range or all time.",
        "tags": [
          "SuperAdmin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "range",
            "schema": {
              "type": "string",
              "default": "all",
              "description": "Date range filter (e.g., 7days, 30days, all)"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with status statistics",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "integer"
                        },
                        "active": {
                          "type": "integer"
                        },
                        "expired": {
                          "type": "integer"
                        },
                        "suspended": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/plans/{id}": {
      "put": {
        "summary": "Update a plan",
        "description": "Updates an existing subscription plan.",
        "tags": [
          "SuperAdmin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Plan ID"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "- **name** - Plan name (optional)\n- **price** - Plan price (non-negative, optional)\n- **maxUsers** - Maximum number of users (minimum 1, optional)\n- **features** - Array of plan features (optional)\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "price": {
                    "type": "number",
                    "minimum": 0
                  },
                  "maxUsers": {
                    "type": "integer",
                    "minimum": 1
                  },
                  "features": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": []
              },
              "example": {
                "name": "Basic Updated",
                "price": 25
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Plan updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Plan"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Plan not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Retrieve a specific plan",
        "description": "Fetches details of a single plan by ID.",
        "tags": [
          "SuperAdmin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Plan ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with plan details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Plan"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Plan not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/upload": {
      "post": {
        "summary": "Upload Files",
        "description": "Upload files",
        "tags": [
          "Upload"
        ],
        "security": [],
        "requestBody": {
          "required": true,
          "description": "\u003Cb\u003Efile\u003C/b\u003E\u003Cbr\u003EUpload files\u003C/br\u003E",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Account created"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/upload/download/{fileId}/{name}": {
      "get": {
        "summary": "Download  file",
        "description": "Downloads a file by its unique identifier.\nReturns the file as a stream with appropriate content headers.\n",
        "tags": [
          "Upload"
        ],
        "security": [],
        "parameters": [
          {
            "in": "path",
            "name": "fileId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The unique identifier of the file to download"
          },
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The file name to download"
          }
        ],
        "responses": {
          "200": {
            "description": "File download successful",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            },
            "headers": {
              "Content-Disposition": {
                "schema": {
                  "type": "string"
                },
                "description": "Contains filename when forcing download.\nExample: \"attachment; filename=example.pdf\"\n"
              },
              "Content-Type": {
                "schema": {
                  "type": "string"
                },
                "description": "Actual MIME type of the file"
              },
              "Content-Length": {
                "schema": {
                  "type": "integer"
                },
                "description": "Size of the file in bytes"
              }
            }
          },
          "500": {
            "description": "Server error during file retrieval",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "summary": "Retrieve a list of users for a company",
        "description": "Fetches a paginated list of users for the authenticated user's company, regardless of role.",
        "tags": [
          "CompanyAdmin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "description": "Page number"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10,
              "description": "Items per page"
            }
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string",
              "description": "Search term for user email"
            }
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "pending",
                "accepted",
                "inactive"
              ],
              "description": "Filter by user status"
            }
          },
          {
            "in": "query",
            "name": "role",
            "schema": {
              "type": "string",
              "enum": [
                "company_admin",
                "super_admin"
              ],
              "description": "Filter by user role (optional)"
            }
          },
          {
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "description": "Filter by last login date range (format: from-to or from or to)"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with user list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "integer"
                        },
                        "page": {
                          "type": "integer"
                        },
                        "limit": {
                          "type": "integer"
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/User"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/users/": {
      "put": {
        "summary": "Update user",
        "description": "Updates a user's details with the following optional fields:\n- \u003Cb\u003Ename\u003C/b\u003E - User name (string, trimmed, minimum length 1)\n- \u003Cb\u003Ephone\u003C/b\u003E - User phone number (string)\n- \u003Cb\u003Eavatar\u003C/b\u003E - User avatar (string)\n- \u003Cb\u003Edepartment\u003C/b\u003E - User department (string)\n- \u003Cb\u003EbusinessType\u003C/b\u003E - Vendor business type (string)\n- \u003Cb\u003Elocation\u003C/b\u003E - Vendor location (string)\n- \u003Cb\u003EsecondaryEmail\u003C/b\u003E - Array of vendor secondary emails (must be valid emails)\n- \u003Cb\u003Ewebsite\u003C/b\u003E - User website (must be valid URL)\n",
        "tags": [
          "SuperAdmin",
          "CompanyAdmin",
          "ProcurementLead",
          "Vendor",
          "Evaluator"
        ],
        "security": null,
        "requestBody": {
          "description": "User update payload",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "phone": {
                    "type": "string"
                  },
                  "avatar": {
                    "type": "string"
                  },
                  "department": {
                    "type": "string"
                  },
                  "businessType": {
                    "type": "string"
                  },
                  "location": {
                    "type": "string"
                  },
                  "secondaryEmail": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "email"
                    }
                  },
                  "website": {
                    "type": "string",
                    "format": "url"
                  }
                }
              },
              "example": {
                "name": "John Doe",
                "phone": "1234567890",
                "department": "Procurement",
                "businessType": "Manufacturer",
                "location": "New York, USA",
                "secondaryEmail": [
                  "secondary@company.com"
                ],
                "website": "https://company.com"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/users/me": {
      "get": {
        "summary": "Retrieve my user profile",
        "description": "Fetches user details.",
        "tags": [
          "CompanyAdmin",
          "SuperAdmin",
          "Vendor",
          "Evaluator",
          "ProcurementLead"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with user details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/users/activity": {
      "get": {
        "summary": "Retrieve my user profile",
        "description": "Fetches user activity.",
        "tags": [
          "CompanyAdmin",
          "SuperAdmin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "activity": {
                          "type": "array",
                          "items": {
                            "typpe": "object",
                            "propertties": {
                              "status": {
                                "type": "string"
                              },
                              "count": {
                                "type": "number"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/users/change-password": {
      "put": {
        "summary": "Change user password",
        "description": "Change usesr password:\n- \u003Cb\u003EoldPassword\u003C/b\u003E - Old user password (string, minimum length 6)\n- \u003Cb\u003EnewPassword\u003C/b\u003E - New user password (string, minimum\n",
        "tags": [
          "SuperAdmin",
          "CompanyAdmin",
          "Vendor",
          "Evaluator",
          "ProcurementLead"
        ],
        "security": null,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "oldPassword": {
                    "type": "string"
                  },
                  "newPassword": {
                    "type": "string"
                  }
                }
              },
              "example": {
                "oldPassword": "New York, USA",
                "newPassword": "https://company.com"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "message": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Accouont not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/users/company": {
      "put": {
        "summary": "Update company details",
        "description": "Updates company details with the following optional fields:\n- \u003Cb\u003EbusinessType\u003C/b\u003E - Company business type (string)\n- \u003Cb\u003Elocation\u003C/b\u003E - Company location (string)\n- \u003Cb\u003Ewebsite\u003C/b\u003E - Company website (string)\n- \u003Cb\u003Ephone\u003C/b\u003E - Company phone number (string)\n- \u003Cb\u003Elogo\u003C/b\u003E - Company logo URL (must be valid URL)\n",
        "tags": [
          "SuperAdmin",
          "CompanyAdmin"
        ],
        "security": null,
        "requestBody": {
          "description": "Company update payload",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "businessType": {
                    "type": "string"
                  },
                  "location": {
                    "type": "string"
                  },
                  "website": {
                    "type": "string"
                  },
                  "phone": {
                    "type": "string"
                  },
                  "logo": {
                    "type": "string",
                    "format": "url"
                  }
                }
              },
              "example": {
                "businessType": "Manufacturer",
                "location": "New York, USA",
                "website": "https://company.com",
                "phone": "1234567890",
                "logo": "https://company.com/logo.png"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Company updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/users/document": {
      "post": {
        "summary": "Add new document",
        "description": "Updates vendor document details with the following optional fields:\n- \u003Cb\u003Ename\u003C/b\u003E - file name (string)\n- \u003Cb\u003Eurl\u003C/b\u003E - file URL (must be valid URL)\n- \u003Cb\u003Esize\u003C/b\u003E - file size (string)\n- \u003Cb\u003Etype\u003C/b\u003E - file type type (string)\n",
        "tags": [
          "Vendor"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string",
                    "format": "url"
                  },
                  "size": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  }
                }
              },
              "example": {
                "name": "Acme Corp",
                "url": "https://acme.com/pdf",
                "size": "500-1000",
                "type": "Manufacturer"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "Items": {
                        "$ref": "#/components/schemas/Document"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Document not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/users/document/{documentId}": {
      "delete": {
        "summary": "delete existing document",
        "description": "Delete existing document:\n",
        "tags": [
          "Vendor"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "documentId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "document  ID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "Items": {
                        "$ref": "#/components/schemas/Document"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Document not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}/status": {
      "put": {
        "summary": "Update user status",
        "description": "Updates the status of a specific user by ID.",
        "tags": [
          "CompanyAdmin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "User ID"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "- \u003Cb\u003Estatus\u003C/b\u003E - New status for the user. Values: active | inactive\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": [
                      "active",
                      "inactive"
                    ]
                  }
                },
                "required": [
                  "status"
                ]
              },
              "example": {
                "status": "active"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User status updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "summary": "Retrieve a specific user",
        "description": "Fetches details of a specific user by ID.",
        "tags": [
          "CompanyAdmin",
          "SuperAdmin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "User ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with user details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update other user",
        "description": "Update other user .",
        "tags": [
          "CompanyAdmin",
          "SuperAdmin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "User ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with user details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/vendor/proposal/{proposalId}": {
      "get": {
        "summary": "View proposal details",
        "description": "Proposal submitted detail",
        "tags": [
          "Vendor-Proposal"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "proposalId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "proposalId"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Proposal"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Proposal not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/vendor/proposal/{solicitationId}/view-criteria": {
      "get": {
        "summary": "View Solicitaion criteria before submission",
        "description": "Show vendor solicitation requirement",
        "tags": [
          "Vendor-Proposal"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "solicitationId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "solicitationId"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/RequiredDocument"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Solicitation not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/vendor/proposal/{solicitationId}/submit": {
      "post": {
        "summary": "Submit vendor proposal for solicitation",
        "description": "Submit a vendor proposal in response to a solicitation.\nIncludes required documents and price breakdown with validation rules:\n- Total amount must match sum of all price components\n- Status must be either 'draft' or 'submit'\n- Total and status are requuired\n- Documents must include all required files\n- Price components must have valid quantities and amounts\n",
        "tags": [
          "Vendor-Proposal"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "solicitationId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique identifier of the solicitation"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Vendor proposal submission data",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "total": {
                    "type": "number",
                    "description": "Total proposal amount (must match sum of all price components)",
                    "example": 12500.5,
                    "minimum": 0
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "draft",
                      "submit"
                    ],
                    "description": "Submission status (draft saves for later, submit finalizes proposal)",
                    "example": "submit"
                  },
                  "document": {
                    "type": "array",
                    "description": "Required documents with attached files",
                    "items": {
                      "type": "object",
                      "properties": {
                        "requiredDocumentid": {
                          "type": "string",
                          "format": null,
                          "description": "ID of the required document",
                          "example": "a1b2c3d4-e5f6-7890-g1h2-i3j4k5l6m7n8"
                        },
                        "files": {
                          "type": "array",
                          "description": "Attached files for this document",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "Original file name",
                                "example": "proposal.pdf"
                              },
                              "url": {
                                "type": "string",
                                "format": "uri",
                                "description": "URL to access the file",
                                "example": "https://storage.example.com/proposals/123.pdf"
                              },
                              "size": {
                                "type": "string",
                                "description": "File size in bytes",
                                "example": "2048000"
                              },
                              "type": {
                                "type": "string",
                                "description": "MIME type of the file",
                                "example": "application/pdf"
                              }
                            }
                          },
                          "minItems": 1
                        }
                      }
                    },
                    "minItems": 1
                  },
                  "priceAction": {
                    "type": "array",
                    "description": "Detailed price breakdown of the proposal",
                    "items": {
                      "type": "object",
                      "properties": {
                        "component": {
                          "type": "string",
                          "description": "Name of the price component",
                          "example": "Labor",
                          "minLength": 2,
                          "maxLength": 100
                        },
                        "description": {
                          "type": "string",
                          "description": "Detailed description of the component",
                          "example": "Senior developer hours",
                          "minLength": 10,
                          "maxLength": 500
                        },
                        "quantity": {
                          "type": "number",
                          "description": "Quantity of units",
                          "example": 40,
                          "minimum": 0
                        },
                        "unitOfmeasurement": {
                          "type": "string",
                          "description": "Unit of measurement (hours, items, etc.)",
                          "example": "hours"
                        },
                        "unitPrice": {
                          "type": "number",
                          "description": "Price per unit",
                          "example": 125.5,
                          "minimum": 0
                        },
                        "subtotal": {
                          "type": "number",
                          "description": "Calculated subtotal (quantity × unitPrice)",
                          "example": 5020,
                          "minimum": 0
                        },
                        "subItems": {
                          "type": "array",
                          "description": "Optional breakdown of sub-components",
                          "items": {
                            "type": "object",
                            "properties": {
                              "component": {
                                "type": "string",
                                "example": "Overtime hours"
                              },
                              "description": {
                                "type": "string",
                                "example": "Additional hours beyond contract"
                              },
                              "quantity": {
                                "type": "number",
                                "example": 10
                              },
                              "unitOfmeasurement": {
                                "type": "string",
                                "example": "hours"
                              },
                              "unitPrice": {
                                "type": "number",
                                "example": 187.5
                              },
                              "subtotal": {
                                "type": "number",
                                "example": 1875
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "required": [
                  "total",
                  "status"
                ],
                "example": {
                  "total": 12500.5,
                  "status": "submit",
                  "document": [
                    {
                      "requiredDocumentId": "a1b2c3d4-e5f6-7890-g1h2-i3j4k5l6m7n8",
                      "files": [
                        {
                          "name": "proposal.pdf",
                          "url": "https://storage.example.com/proposals/123.pdf",
                          "size": "2048000",
                          "type": "application/pdf"
                        }
                      ]
                    }
                  ],
                  "priceAction": [
                    {
                      "component": "Labor",
                      "description": "Senior developer hours",
                      "quantity": 40,
                      "unitOfmeasurement": "hours",
                      "unitPrice": 125.5,
                      "subtotal": 5020,
                      "subItems": [
                        {
                          "component": "Overtime",
                          "description": "Additional hours beyond contract",
                          "quantity": 10,
                          "unitOfmeasurement": "hours",
                          "unitPrice": 187.5,
                          "subtotal": 1875
                        }
                      ]
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Proposal submitted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Proposal submitted successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/RequiredDocument"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid proposal data or total mismatch",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Solicitation not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "422": {
            "description": "Validation error in proposal data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/vendor/proposal/{solicitationId}/proposal/:proposalId": {
      "put": {
        "summary": "Edit Submit vendor proposal for solicitation",
        "description": "Submit a vendor proposal in response to a solicitation.\nIncludes required documents and price breakdown with validation rules:\n- Total amount must match sum of all price components\n- Status must be either 'draft' or 'submit'\n- Total and status are requuired\n- Documents must include all required files\n- Price components must have valid quantities and amounts\n",
        "tags": [
          "Vendor-Proposal"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "solicitationId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique identifier of the solicitation"
            }
          },
          {
            "in": "path",
            "name": "proposalId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique identifier of the proposal"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Vendor proposal submission data",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "total": {
                    "type": "number",
                    "description": "Total proposal amount (must match sum of all price components)",
                    "example": 12500.5,
                    "minimum": 0
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "draft",
                      "submit"
                    ],
                    "description": "Submission status (draft saves for later, submit finalizes proposal)",
                    "example": "submit"
                  },
                  "document": {
                    "type": "array",
                    "description": "Required documents with attached files",
                    "items": {
                      "type": "object",
                      "properties": {
                        "requiredDocumentid": {
                          "type": "string",
                          "format": null,
                          "description": "ID of the required document",
                          "example": "a1b2c3d4-e5f6-7890-g1h2-i3j4k5l6m7n8"
                        },
                        "files": {
                          "type": "array",
                          "description": "Attached files for this document",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "Original file name",
                                "example": "proposal.pdf"
                              },
                              "url": {
                                "type": "string",
                                "format": "uri",
                                "description": "URL to access the file",
                                "example": "https://storage.example.com/proposals/123.pdf"
                              },
                              "size": {
                                "type": "string",
                                "description": "File size in bytes",
                                "example": "2048000"
                              },
                              "type": {
                                "type": "string",
                                "description": "MIME type of the file",
                                "example": "application/pdf"
                              }
                            }
                          },
                          "minItems": 1
                        }
                      }
                    },
                    "minItems": 1
                  },
                  "priceAction": {
                    "type": "array",
                    "description": "Detailed price breakdown of the proposal",
                    "items": {
                      "type": "object",
                      "properties": {
                        "component": {
                          "type": "string",
                          "description": "Name of the price component",
                          "example": "Labor",
                          "minLength": 2,
                          "maxLength": 100
                        },
                        "description": {
                          "type": "string",
                          "description": "Detailed description of the component",
                          "example": "Senior developer hours",
                          "minLength": 10,
                          "maxLength": 500
                        },
                        "quantity": {
                          "type": "number",
                          "description": "Quantity of units",
                          "example": 40,
                          "minimum": 0
                        },
                        "unitOfmeasurement": {
                          "type": "string",
                          "description": "Unit of measurement (hours, items, etc.)",
                          "example": "hours"
                        },
                        "unitPrice": {
                          "type": "number",
                          "description": "Price per unit",
                          "example": 125.5,
                          "minimum": 0
                        },
                        "subtotal": {
                          "type": "number",
                          "description": "Calculated subtotal (quantity × unitPrice)",
                          "example": 5020,
                          "minimum": 0
                        },
                        "subItems": {
                          "type": "array",
                          "description": "Optional breakdown of sub-components",
                          "items": {
                            "type": "object",
                            "properties": {
                              "component": {
                                "type": "string",
                                "example": "Overtime hours"
                              },
                              "description": {
                                "type": "string",
                                "example": "Additional hours beyond contract"
                              },
                              "quantity": {
                                "type": "number",
                                "example": 10
                              },
                              "unitOfmeasurement": {
                                "type": "string",
                                "example": "hours"
                              },
                              "unitPrice": {
                                "type": "number",
                                "example": 187.5
                              },
                              "subtotal": {
                                "type": "number",
                                "example": 1875
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "required": [
                  "total",
                  "status"
                ],
                "example": {
                  "total": 12500.5,
                  "status": "submit",
                  "document": [
                    {
                      "requiredDocumentId": "a1b2c3d4-e5f6-7890-g1h2-i3j4k5l6m7n8",
                      "files": [
                        {
                          "name": "proposal.pdf",
                          "url": "https://storage.example.com/proposals/123.pdf",
                          "size": "2048000",
                          "type": "application/pdf"
                        }
                      ]
                    }
                  ],
                  "priceAction": [
                    {
                      "component": "Labor",
                      "description": "Senior developer hours",
                      "quantity": 40,
                      "unitOfmeasurement": "hours",
                      "unitPrice": 125.5,
                      "subtotal": 5020,
                      "subItems": [
                        {
                          "component": "Overtime",
                          "description": "Additional hours beyond contract",
                          "quantity": 10,
                          "unitOfmeasurement": "hours",
                          "unitPrice": 187.5,
                          "subtotal": 1875
                        }
                      ]
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Proposal submitted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Proposal submitted successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/RequiredDocument"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid proposal data or total mismatch",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Solicitation not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "422": {
            "description": "Validation error in proposal data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/vendor/solicitations": {
      "get": {
        "summary": "View all public and accepted solicitation",
        "description": "solicitation invitation",
        "tags": [
          "Vendor-Solicitation"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string",
              "description": "solicitation name"
            }
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "Draft",
                "Pending",
                "InActive",
                "Completed",
                "Active",
                "Suspended"
              ],
              "description": "status - Draft | Pending | InActive | Completed | Active | Suspended"
            }
          },
          {
            "in": "query",
            "name": "category",
            "schema": {
              "type": "string",
              "description": "category id"
            }
          },
          {
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "description": "date range yyyy-mm-dd-yyyy-mm-dd"
            }
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "description": "list page"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "string",
              "description": "list limit"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Solicitation"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Solicitation not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/vendor/solicitations/me": {
      "get": {
        "summary": "View my accepted solicitation",
        "description": "solicitation invitation",
        "tags": [
          "Vendor-Solicitation"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string",
              "description": "solicitation name"
            }
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "Draft",
                "Pending",
                "InActive",
                "Completed",
                "Active",
                "Suspended"
              ],
              "description": "status - Draft | Pending | InActive | Completed | Active | Suspended"
            }
          },
          {
            "in": "query",
            "name": "category",
            "schema": {
              "type": "string",
              "description": "category id"
            }
          },
          {
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "description": "date range yyyy-mm-dd-yyyy-mm-dd"
            }
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "description": "list page"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "string",
              "description": "list limit"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Solicitation"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Solicitation not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/vendor/solicitations/my-invitations": {
      "get": {
        "summary": "View my invited solicitation",
        "description": "solicitation invitation",
        "tags": [
          "Vendor-Solicitation"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string",
              "description": "solicitation name"
            }
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "Draft",
                "Pending",
                "InActive",
                "Completed",
                "Active",
                "Suspended"
              ],
              "description": "status - Draft | Pending | InActive | Completed | Active | Suspended"
            }
          },
          {
            "in": "query",
            "name": "category",
            "schema": {
              "type": "string",
              "description": "category id"
            }
          },
          {
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "description": "date range yyyy-mm-dd-yyyy-mm-dd"
            }
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "description": "list page"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "string",
              "description": "list limit"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Solicitation"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Solicitation not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/vendor/solicitations/dashboard": {
      "get": {
        "summary": "Dashboard card",
        "description": "solicitation Overview",
        "tags": [
          "Vendor-Solicitation"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "all": "number",
                            "type": "string"
                          },
                          "awarded": {
                            "type": "number"
                          },
                          "closed": {
                            "all": "number"
                          },
                          "active": {
                            "type": "number"
                          },
                          "draft": {
                            "type": "number"
                          },
                          "count": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/vendor/solicitations/my-actions": {
      "get": {
        "summary": "Vendor actions",
        "description": "Vendor actions limit to 10 - Action types \"evaluation\", \"update\", \"vendor_accept\", \"vendor_declined\",\"vendor_submitted\",\"scored\", \"awarded\",\"question\", \"response\",\"invite\",\"addendum\",",
        "tags": [
          "Vendor-Solicitation"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/VendorAction"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/vendor/solicitations/general-updates": {
      "get": {
        "summary": "General update",
        "description": "Limit updates to ten",
        "tags": [
          "Vendor-Solicitation"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/VendorUpdate"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/vendor/solicitations/{solicitationId}": {
      "get": {
        "summary": "Solicitation details",
        "description": "Details",
        "tags": [
          "Vendor-Solicitation"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "solicitationId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "solicitationId"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "details": {
                          "type": "object",
                          "properties": null
                        },
                        "status": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Solicitation not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/vendor/solicitations/{solicitationId}/confirm": {
      "put": {
        "summary": "Accept solicitation invitation",
        "description": "Vendor acceot invitation",
        "tags": [
          "Vendor-Solicitation"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "solicitationId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "solicitationId"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Solicitation not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/vendor/solicitations/{solicitationId}/decline": {
      "put": {
        "summary": "Decline solicitation invitation",
        "description": "Vendor decline invitation",
        "tags": [
          "Vendor-Solicitation"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "solicitationId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "solicitationId"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Solicitation not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/vendor/solicitations/{solicitationId}/criteria": {
      "get": {
        "summary": "Check evaluation requested document",
        "description": "Evaluation criteria",
        "tags": [
          "Procurement-Evaluation",
          "Vendor-Solicitation"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "solicitationId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "solicitationId"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/components/schemas/EvaluationCriteriaOverview"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Evaluation not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/vendor/solicitations/{solicitationId}/questions": {
      "get": {
        "summary": "Solicitation questions",
        "description": "Questiona and answers",
        "tags": [
          "Vendor-Solicitation"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "solicitationId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "solicitationId"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "totalAnswer": {
                          "type": "number"
                        },
                        "questionCount": {
                          "type": "number"
                        },
                        "question": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/SolicitationQuestion"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Solicitation not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Ask Solicitation questions",
        "description": "Ask Question",
        "tags": [
          "Vendor-Solicitation"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "solicitationId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "solicitationId"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "\u003Cb\u003Enote\u003C/b\u003E\u003Cbr\u003EQuestion\u003C/br\u003E",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": null,
                "example": {
                  "note": "Please clarify"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "propertes": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Solicitation not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/vendor/solicitations/{questionId}/mark-as-answered": {
      "put": {
        "summary": "Mark question as answered",
        "description": "Question answered",
        "tags": [
          "Vendor-Solicitation"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "questionId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "questionId"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Solicitation not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    },
    "/vendor/solicitations/{solicitationId}/questions/{questionId}": {
      "post": {
        "summary": "Rply to Solicitation questions",
        "description": "Answer",
        "tags": [
          "Vendor-Solicitation"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "solicitationId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "solicitationId"
            }
          },
          {
            "in": "path",
            "name": "questionId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "questionId"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "\u003Cb\u003Enote\u003C/b\u003E\u003Cbr\u003EQuestion\u003C/br\u003E",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": null,
                "example": {
                  "note": "Clarification"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "propertes": null
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "unauthenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedError"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizeError"
                }
              }
            }
          },
          "404": {
            "description": "Solicitation not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Something bad went wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerError"
                }
              }
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "SuperAdmin",
      "description": "API endpoint for managing superadmin"
    },
    {
      "name": "ProcurementLead",
      "description": "API endpoint for managing procurement resources"
    },
    {
      "name": "Evaluator",
      "description": "API endpoint for managing evaluator resources"
    },
    {
      "name": "Vendor",
      "description": "API endpoint for managing vendor resources"
    },
    {
      "name": "Upload",
      "description": "API endpoint for uploading resources"
    },
    {
      "name": "CompanyAdmin",
      "description": "API endpoint for managing companyadmin"
    },
    {
      "name": "Notification",
      "description": "API endpoint for managing notifications"
    },
    {
      "name": "Admin",
      "description": "API endpoint for managing admin"
    },
    {
      "name": "Procurement-Vendor",
      "description": "API endpoint for managing procurement vendors"
    },
    {
      "name": "Procurement-Solicitations",
      "description": "API endpoint for managing procurement solicitation",
      "x-parent": "ProcurementLead"
    },
    {
      "name": "Procurement-Evaluation",
      "description": "API endpoint for managing procurement evaluation",
      "x-parent": "ProcurementLead"
    },
    {
      "name": "Vendor-Solicitation",
      "description": "API endpoint for managing vendor solicitation resources"
    },
    {
      "name": "Vendor-Proposal",
      "description": "API endpoint for managing vendor proposal resources"
    }
  ]
}